
RC-CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003718  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00003718  0000378c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002d0c  00000000  00000000  000037e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000012e3  00000000  00000000  000064ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000077cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000792f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00007abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00009b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000ac04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000bb88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000bd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000bfca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <main>
      7a:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab ea       	ldi	r26, 0xAB	; 171
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	8b ea       	ldi	r24, 0xAB	; 171
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ba 18 	jmp	0x3174	; 0x3174 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6b ea       	ldi	r22, 0xAB	; 171
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 d6 18 	jmp	0x31ac	; 0x31ac <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <UART_Init>:
#include <util/delay.h>
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include "UART_Interface.h"

void UART_Init(u16 baud) {
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <UART_Init+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <UART_Init+0x8>
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	9c 83       	std	Y+4, r25	; 0x04
     c9c:	8b 83       	std	Y+3, r24	; 0x03
    u16 ubrr = (F_CPU / (16UL * baud)) - 1;
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	cc 01       	movw	r24, r24
     ca4:	a0 e0       	ldi	r26, 0x00	; 0
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	aa 1f       	adc	r26, r26
     cae:	bb 1f       	adc	r27, r27
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	aa 1f       	adc	r26, r26
     cb6:	bb 1f       	adc	r27, r27
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	aa 1f       	adc	r26, r26
     cbe:	bb 1f       	adc	r27, r27
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	aa 1f       	adc	r26, r26
     cc6:	bb 1f       	adc	r27, r27
     cc8:	9c 01       	movw	r18, r24
     cca:	ad 01       	movw	r20, r26
     ccc:	80 e4       	ldi	r24, 0x40	; 64
     cce:	92 e4       	ldi	r25, 0x42	; 66
     cd0:	af e0       	ldi	r26, 0x0F	; 15
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	bc 01       	movw	r22, r24
     cd6:	cd 01       	movw	r24, r26
     cd8:	0e 94 75 18 	call	0x30ea	; 0x30ea <__udivmodsi4>
     cdc:	da 01       	movw	r26, r20
     cde:	c9 01       	movw	r24, r18
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	9a 83       	std	Y+2, r25	; 0x02
     ce4:	89 83       	std	Y+1, r24	; 0x01
    UBRRH = (u8)(ubrr >> 8);
     ce6:	e0 e4       	ldi	r30, 0x40	; 64
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	9a 81       	ldd	r25, Y+2	; 0x02
     cee:	89 2f       	mov	r24, r25
     cf0:	99 27       	eor	r25, r25
     cf2:	80 83       	st	Z, r24
    UBRRL = (u8)ubrr;
     cf4:	e9 e2       	ldi	r30, 0x29	; 41
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	80 83       	st	Z, r24

    // Enable RX and TX
    SET_BIT(UCSRB, RXEN);
     cfc:	aa e2       	ldi	r26, 0x2A	; 42
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ea e2       	ldi	r30, 0x2A	; 42
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 61       	ori	r24, 0x10	; 16
     d08:	8c 93       	st	X, r24
    SET_BIT(UCSRB, TXEN);
     d0a:	aa e2       	ldi	r26, 0x2A	; 42
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ea e2       	ldi	r30, 0x2A	; 42
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	88 60       	ori	r24, 0x08	; 8
     d16:	8c 93       	st	X, r24


    UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
     d18:	e0 e4       	ldi	r30, 0x40	; 64
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	86 e8       	ldi	r24, 0x86	; 134
     d1e:	80 83       	st	Z, r24
}
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <UART_Receive>:

u8 UART_Receive(void) {
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
    while (!(UCSRA & (1 << RXC)));
     d36:	eb e2       	ldi	r30, 0x2B	; 43
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	88 23       	and	r24, r24
     d3e:	dc f7       	brge	.-10     	; 0xd36 <UART_Receive+0x8>
    return UDR;
     d40:	ec e2       	ldi	r30, 0x2C	; 44
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <UART_Transmit>:

void UART_Transmit(u8 data) {
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	0f 92       	push	r0
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	89 83       	std	Y+1, r24	; 0x01
    while (!(UCSRA & (1 << UDRE)));
     d58:	eb e2       	ldi	r30, 0x2B	; 43
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	80 72       	andi	r24, 0x20	; 32
     d64:	90 70       	andi	r25, 0x00	; 0
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	b9 f3       	breq	.-18     	; 0xd58 <UART_Transmit+0xc>
    UDR = data;
     d6a:	ec e2       	ldi	r30, 0x2C	; 44
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	80 83       	st	Z, r24
}
     d72:	0f 90       	pop	r0
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <I2C_Init>:
#include "I2C_Interface.h"

#define F_SCL 100000UL
#define TWBR_val ((((F_CPU / F_SCL) - 16 ) / 2))

void I2C_Init(void) {
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
    TWSR = 0x00;
     d82:	e1 e2       	ldi	r30, 0x21	; 33
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	10 82       	st	Z, r1
    TWBR = (u8)TWBR_val;
     d88:	e0 e2       	ldi	r30, 0x20	; 32
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	8d ef       	ldi	r24, 0xFD	; 253
     d8e:	80 83       	st	Z, r24
}
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <I2C_Start>:

void I2C_Start(void) {
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
     d9e:	e6 e5       	ldi	r30, 0x56	; 86
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	84 ea       	ldi	r24, 0xA4	; 164
     da4:	80 83       	st	Z, r24
    while (GET_BIT(TWCR, TWINT) == 0);
     da6:	e6 e5       	ldi	r30, 0x56	; 86
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	88 23       	and	r24, r24
     dae:	dc f7       	brge	.-10     	; 0xda6 <I2C_Start+0x10>
}
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <I2C_Stop>:

void I2C_Stop(void) {
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);
     dbe:	e6 e5       	ldi	r30, 0x56	; 86
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	84 e9       	ldi	r24, 0x94	; 148
     dc4:	80 83       	st	Z, r24
}
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <I2C_Write>:

void I2C_Write(u8 data) {
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	0f 92       	push	r0
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data;
     dd8:	e3 e2       	ldi	r30, 0x23	; 35
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	80 83       	st	Z, r24
    TWCR = (1 << TWEN) | (1 << TWINT);
     de0:	e6 e5       	ldi	r30, 0x56	; 86
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	84 e8       	ldi	r24, 0x84	; 132
     de6:	80 83       	st	Z, r24
    while (GET_BIT(TWCR, TWINT) == 0);
     de8:	e6 e5       	ldi	r30, 0x56	; 86
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	88 23       	and	r24, r24
     df0:	dc f7       	brge	.-10     	; 0xde8 <I2C_Write+0x1c>
}
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <DIO_u8SetPinDirection>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include "DIO_Interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <DIO_u8SetPinDirection+0x6>
     e00:	00 d0       	rcall	.+0      	; 0xe02 <DIO_u8SetPinDirection+0x8>
     e02:	00 d0       	rcall	.+0      	; 0xe04 <DIO_u8SetPinDirection+0xa>
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	6a 83       	std	Y+2, r22	; 0x02
     e0c:	4b 83       	std	Y+3, r20	; 0x03
    if (Copy_u8Pin > 7) return DIO_u8_NOK;
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	88 30       	cpi	r24, 0x08	; 8
     e12:	18 f0       	brcs	.+6      	; 0xe1a <DIO_u8SetPinDirection+0x20>
     e14:	21 e0       	ldi	r18, 0x01	; 1
     e16:	2e 83       	std	Y+6, r18	; 0x06
     e18:	d6 c0       	rjmp	.+428    	; 0xfc6 <DIO_u8SetPinDirection+0x1cc>
    switch(Copy_u8Port)
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	3d 83       	std	Y+5, r19	; 0x05
     e22:	2c 83       	std	Y+4, r18	; 0x04
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	9d 81       	ldd	r25, Y+5	; 0x05
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	91 05       	cpc	r25, r1
     e2c:	09 f4       	brne	.+2      	; 0xe30 <DIO_u8SetPinDirection+0x36>
     e2e:	43 c0       	rjmp	.+134    	; 0xeb6 <DIO_u8SetPinDirection+0xbc>
     e30:	2c 81       	ldd	r18, Y+4	; 0x04
     e32:	3d 81       	ldd	r19, Y+5	; 0x05
     e34:	22 30       	cpi	r18, 0x02	; 2
     e36:	31 05       	cpc	r19, r1
     e38:	2c f4       	brge	.+10     	; 0xe44 <DIO_u8SetPinDirection+0x4a>
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
     e3c:	9d 81       	ldd	r25, Y+5	; 0x05
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	71 f0       	breq	.+28     	; 0xe5e <DIO_u8SetPinDirection+0x64>
     e42:	bd c0       	rjmp	.+378    	; 0xfbe <DIO_u8SetPinDirection+0x1c4>
     e44:	2c 81       	ldd	r18, Y+4	; 0x04
     e46:	3d 81       	ldd	r19, Y+5	; 0x05
     e48:	22 30       	cpi	r18, 0x02	; 2
     e4a:	31 05       	cpc	r19, r1
     e4c:	09 f4       	brne	.+2      	; 0xe50 <DIO_u8SetPinDirection+0x56>
     e4e:	5f c0       	rjmp	.+190    	; 0xf0e <DIO_u8SetPinDirection+0x114>
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	9d 81       	ldd	r25, Y+5	; 0x05
     e54:	83 30       	cpi	r24, 0x03	; 3
     e56:	91 05       	cpc	r25, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <DIO_u8SetPinDirection+0x62>
     e5a:	85 c0       	rjmp	.+266    	; 0xf66 <DIO_u8SetPinDirection+0x16c>
     e5c:	b0 c0       	rjmp	.+352    	; 0xfbe <DIO_u8SetPinDirection+0x1c4>
    {
        case DIO_u8_PORTA:
            if (Copy_u8Direction == DIO_u8_OUTPUT) SET_BIT(DDRA, Copy_u8Pin);
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	a1 f4       	brne	.+40     	; 0xe8c <DIO_u8SetPinDirection+0x92>
     e64:	aa e3       	ldi	r26, 0x3A	; 58
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ea e3       	ldi	r30, 0x3A	; 58
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_u8SetPinDirection+0x88>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_u8SetPinDirection+0x84>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	9c c0       	rjmp	.+312    	; 0xfc4 <DIO_u8SetPinDirection+0x1ca>
            else CLR_BIT(DDRA, Copy_u8Pin);
     e8c:	aa e3       	ldi	r26, 0x3A	; 58
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ea e3       	ldi	r30, 0x3A	; 58
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_u8SetPinDirection+0xb0>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_u8SetPinDirection+0xac>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	87 c0       	rjmp	.+270    	; 0xfc4 <DIO_u8SetPinDirection+0x1ca>
            break;
        case DIO_u8_PORTB:
            if (Copy_u8Direction == DIO_u8_OUTPUT) SET_BIT(DDRB, Copy_u8Pin);
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	a1 f4       	brne	.+40     	; 0xee4 <DIO_u8SetPinDirection+0xea>
     ebc:	a7 e3       	ldi	r26, 0x37	; 55
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e3       	ldi	r30, 0x37	; 55
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_u8SetPinDirection+0xe0>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_u8SetPinDirection+0xdc>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	70 c0       	rjmp	.+224    	; 0xfc4 <DIO_u8SetPinDirection+0x1ca>
            else CLR_BIT(DDRB, Copy_u8Pin);
     ee4:	a7 e3       	ldi	r26, 0x37	; 55
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e3       	ldi	r30, 0x37	; 55
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_u8SetPinDirection+0x108>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_u8SetPinDirection+0x104>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	5b c0       	rjmp	.+182    	; 0xfc4 <DIO_u8SetPinDirection+0x1ca>
            break;
        case DIO_u8_PORTC:
            if (Copy_u8Direction == DIO_u8_OUTPUT) SET_BIT(DDRC, Copy_u8Pin);
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	a1 f4       	brne	.+40     	; 0xf3c <DIO_u8SetPinDirection+0x142>
     f14:	a4 e3       	ldi	r26, 0x34	; 52
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e4 e3       	ldi	r30, 0x34	; 52
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_u8SetPinDirection+0x138>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_u8SetPinDirection+0x134>
     f36:	84 2b       	or	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	44 c0       	rjmp	.+136    	; 0xfc4 <DIO_u8SetPinDirection+0x1ca>
            else CLR_BIT(DDRC, Copy_u8Pin);
     f3c:	a4 e3       	ldi	r26, 0x34	; 52
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e4 e3       	ldi	r30, 0x34	; 52
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_u8SetPinDirection+0x160>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_u8SetPinDirection+0x15c>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	2f c0       	rjmp	.+94     	; 0xfc4 <DIO_u8SetPinDirection+0x1ca>
            break;
        case DIO_u8_PORTD:
            if (Copy_u8Direction == DIO_u8_OUTPUT) SET_BIT(DDRD, Copy_u8Pin);
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	a1 f4       	brne	.+40     	; 0xf94 <DIO_u8SetPinDirection+0x19a>
     f6c:	a1 e3       	ldi	r26, 0x31	; 49
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e1 e3       	ldi	r30, 0x31	; 49
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_u8SetPinDirection+0x190>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_u8SetPinDirection+0x18c>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	18 c0       	rjmp	.+48     	; 0xfc4 <DIO_u8SetPinDirection+0x1ca>
            else CLR_BIT(DDRD, Copy_u8Pin);
     f94:	a1 e3       	ldi	r26, 0x31	; 49
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e1 e3       	ldi	r30, 0x31	; 49
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_u8SetPinDirection+0x1b8>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_u8SetPinDirection+0x1b4>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	03 c0       	rjmp	.+6      	; 0xfc4 <DIO_u8SetPinDirection+0x1ca>
            break;
        default:
            return DIO_u8_NOK;
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	9e 83       	std	Y+6, r25	; 0x06
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <DIO_u8SetPinDirection+0x1cc>
    }
    return DIO_u8_OK;
     fc4:	1e 82       	std	Y+6, r1	; 0x06
     fc6:	8e 81       	ldd	r24, Y+6	; 0x06
}
     fc8:	26 96       	adiw	r28, 0x06	; 6
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <DIO_u8SetPinValue+0x6>
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <DIO_u8SetPinValue+0x8>
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <DIO_u8SetPinValue+0xa>
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	6a 83       	std	Y+2, r22	; 0x02
     fec:	4b 83       	std	Y+3, r20	; 0x03
    if (Copy_u8Pin > 7) return DIO_u8_NOK;
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	88 30       	cpi	r24, 0x08	; 8
     ff2:	18 f0       	brcs	.+6      	; 0xffa <DIO_u8SetPinValue+0x20>
     ff4:	21 e0       	ldi	r18, 0x01	; 1
     ff6:	2e 83       	std	Y+6, r18	; 0x06
     ff8:	d6 c0       	rjmp	.+428    	; 0x11a6 <DIO_u8SetPinValue+0x1cc>
    switch(Copy_u8Port)
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	3d 83       	std	Y+5, r19	; 0x05
    1002:	2c 83       	std	Y+4, r18	; 0x04
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	9d 81       	ldd	r25, Y+5	; 0x05
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	09 f4       	brne	.+2      	; 0x1010 <DIO_u8SetPinValue+0x36>
    100e:	43 c0       	rjmp	.+134    	; 0x1096 <DIO_u8SetPinValue+0xbc>
    1010:	2c 81       	ldd	r18, Y+4	; 0x04
    1012:	3d 81       	ldd	r19, Y+5	; 0x05
    1014:	22 30       	cpi	r18, 0x02	; 2
    1016:	31 05       	cpc	r19, r1
    1018:	2c f4       	brge	.+10     	; 0x1024 <DIO_u8SetPinValue+0x4a>
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	9d 81       	ldd	r25, Y+5	; 0x05
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	71 f0       	breq	.+28     	; 0x103e <DIO_u8SetPinValue+0x64>
    1022:	bd c0       	rjmp	.+378    	; 0x119e <DIO_u8SetPinValue+0x1c4>
    1024:	2c 81       	ldd	r18, Y+4	; 0x04
    1026:	3d 81       	ldd	r19, Y+5	; 0x05
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <DIO_u8SetPinValue+0x56>
    102e:	5f c0       	rjmp	.+190    	; 0x10ee <DIO_u8SetPinValue+0x114>
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	83 30       	cpi	r24, 0x03	; 3
    1036:	91 05       	cpc	r25, r1
    1038:	09 f4       	brne	.+2      	; 0x103c <DIO_u8SetPinValue+0x62>
    103a:	85 c0       	rjmp	.+266    	; 0x1146 <DIO_u8SetPinValue+0x16c>
    103c:	b0 c0       	rjmp	.+352    	; 0x119e <DIO_u8SetPinValue+0x1c4>
    {
        case DIO_u8_PORTA:
            if (Copy_u8Value == DIO_u8_HIGH) SET_BIT(PORTA, Copy_u8Pin);
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	a1 f4       	brne	.+40     	; 0x106c <DIO_u8SetPinValue+0x92>
    1044:	ab e3       	ldi	r26, 0x3B	; 59
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	eb e3       	ldi	r30, 0x3B	; 59
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_u8SetPinValue+0x88>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_u8SetPinValue+0x84>
    1066:	84 2b       	or	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	9c c0       	rjmp	.+312    	; 0x11a4 <DIO_u8SetPinValue+0x1ca>
            else CLR_BIT(PORTA, Copy_u8Pin);
    106c:	ab e3       	ldi	r26, 0x3B	; 59
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	eb e3       	ldi	r30, 0x3B	; 59
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_u8SetPinValue+0xb0>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_u8SetPinValue+0xac>
    108e:	80 95       	com	r24
    1090:	84 23       	and	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	87 c0       	rjmp	.+270    	; 0x11a4 <DIO_u8SetPinValue+0x1ca>
            break;
        case DIO_u8_PORTB:
            if (Copy_u8Value == DIO_u8_HIGH) SET_BIT(PORTB, Copy_u8Pin);
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	a1 f4       	brne	.+40     	; 0x10c4 <DIO_u8SetPinValue+0xea>
    109c:	a8 e3       	ldi	r26, 0x38	; 56
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e8 e3       	ldi	r30, 0x38	; 56
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_u8SetPinValue+0xe0>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_u8SetPinValue+0xdc>
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	70 c0       	rjmp	.+224    	; 0x11a4 <DIO_u8SetPinValue+0x1ca>
            else CLR_BIT(PORTB, Copy_u8Pin);
    10c4:	a8 e3       	ldi	r26, 0x38	; 56
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e8 e3       	ldi	r30, 0x38	; 56
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_u8SetPinValue+0x108>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <DIO_u8SetPinValue+0x104>
    10e6:	80 95       	com	r24
    10e8:	84 23       	and	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	5b c0       	rjmp	.+182    	; 0x11a4 <DIO_u8SetPinValue+0x1ca>
            break;
        case DIO_u8_PORTC:
            if (Copy_u8Value == DIO_u8_HIGH) SET_BIT(PORTC, Copy_u8Pin);
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	a1 f4       	brne	.+40     	; 0x111c <DIO_u8SetPinValue+0x142>
    10f4:	a5 e3       	ldi	r26, 0x35	; 53
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e3       	ldi	r30, 0x35	; 53
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_u8SetPinValue+0x138>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_u8SetPinValue+0x134>
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	44 c0       	rjmp	.+136    	; 0x11a4 <DIO_u8SetPinValue+0x1ca>
            else CLR_BIT(PORTC, Copy_u8Pin);
    111c:	a5 e3       	ldi	r26, 0x35	; 53
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_u8SetPinValue+0x160>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_u8SetPinValue+0x15c>
    113e:	80 95       	com	r24
    1140:	84 23       	and	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	2f c0       	rjmp	.+94     	; 0x11a4 <DIO_u8SetPinValue+0x1ca>
            break;
        case DIO_u8_PORTD:
            if (Copy_u8Value == DIO_u8_HIGH) SET_BIT(PORTD, Copy_u8Pin);
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	a1 f4       	brne	.+40     	; 0x1174 <DIO_u8SetPinValue+0x19a>
    114c:	a2 e3       	ldi	r26, 0x32	; 50
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e2 e3       	ldi	r30, 0x32	; 50
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 2e       	mov	r0, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_u8SetPinValue+0x190>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	0a 94       	dec	r0
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_u8SetPinValue+0x18c>
    116e:	84 2b       	or	r24, r20
    1170:	8c 93       	st	X, r24
    1172:	18 c0       	rjmp	.+48     	; 0x11a4 <DIO_u8SetPinValue+0x1ca>
            else CLR_BIT(PORTD, Copy_u8Pin);
    1174:	a2 e3       	ldi	r26, 0x32	; 50
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e2 e3       	ldi	r30, 0x32	; 50
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_u8SetPinValue+0x1b8>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIO_u8SetPinValue+0x1b4>
    1196:	80 95       	com	r24
    1198:	84 23       	and	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	03 c0       	rjmp	.+6      	; 0x11a4 <DIO_u8SetPinValue+0x1ca>
            break;
        default:
            return DIO_u8_NOK;
    119e:	91 e0       	ldi	r25, 0x01	; 1
    11a0:	9e 83       	std	Y+6, r25	; 0x06
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <DIO_u8SetPinValue+0x1cc>
    }
    return DIO_u8_OK;
    11a4:	1e 82       	std	Y+6, r1	; 0x06
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    11a8:	26 96       	adiw	r28, 0x06	; 6
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_pu8Value)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	27 97       	sbiw	r28, 0x07	; 7
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	6a 83       	std	Y+2, r22	; 0x02
    11d2:	5c 83       	std	Y+4, r21	; 0x04
    11d4:	4b 83       	std	Y+3, r20	; 0x03
    if (Copy_pu8Value == (void*)0) return DIO_u8_NOK;
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	19 f4       	brne	.+6      	; 0x11e4 <DIO_u8GetPinValue+0x2a>
    11de:	21 e0       	ldi	r18, 0x01	; 1
    11e0:	2f 83       	std	Y+7, r18	; 0x07
    11e2:	7b c0       	rjmp	.+246    	; 0x12da <DIO_u8GetPinValue+0x120>
    if (Copy_u8Pin > 7) return DIO_u8_NOK;
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	88 30       	cpi	r24, 0x08	; 8
    11e8:	18 f0       	brcs	.+6      	; 0x11f0 <DIO_u8GetPinValue+0x36>
    11ea:	31 e0       	ldi	r19, 0x01	; 1
    11ec:	3f 83       	std	Y+7, r19	; 0x07
    11ee:	75 c0       	rjmp	.+234    	; 0x12da <DIO_u8GetPinValue+0x120>

    switch(Copy_u8Port)
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	48 2f       	mov	r20, r24
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	5e 83       	std	Y+6, r21	; 0x06
    11f8:	4d 83       	std	Y+5, r20	; 0x05
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	91 05       	cpc	r25, r1
    1202:	59 f1       	breq	.+86     	; 0x125a <DIO_u8GetPinValue+0xa0>
    1204:	2d 81       	ldd	r18, Y+5	; 0x05
    1206:	3e 81       	ldd	r19, Y+6	; 0x06
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	34 f4       	brge	.+12     	; 0x121a <DIO_u8GetPinValue+0x60>
    120e:	4d 81       	ldd	r20, Y+5	; 0x05
    1210:	5e 81       	ldd	r21, Y+6	; 0x06
    1212:	41 15       	cp	r20, r1
    1214:	51 05       	cpc	r21, r1
    1216:	69 f0       	breq	.+26     	; 0x1232 <DIO_u8GetPinValue+0x78>
    1218:	5c c0       	rjmp	.+184    	; 0x12d2 <DIO_u8GetPinValue+0x118>
    121a:	8d 81       	ldd	r24, Y+5	; 0x05
    121c:	9e 81       	ldd	r25, Y+6	; 0x06
    121e:	82 30       	cpi	r24, 0x02	; 2
    1220:	91 05       	cpc	r25, r1
    1222:	79 f1       	breq	.+94     	; 0x1282 <DIO_u8GetPinValue+0xc8>
    1224:	2d 81       	ldd	r18, Y+5	; 0x05
    1226:	3e 81       	ldd	r19, Y+6	; 0x06
    1228:	23 30       	cpi	r18, 0x03	; 3
    122a:	31 05       	cpc	r19, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <DIO_u8GetPinValue+0x76>
    122e:	3d c0       	rjmp	.+122    	; 0x12aa <DIO_u8GetPinValue+0xf0>
    1230:	50 c0       	rjmp	.+160    	; 0x12d2 <DIO_u8GetPinValue+0x118>
    {
        case DIO_u8_PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
    1232:	e9 e3       	ldi	r30, 0x39	; 57
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	a9 01       	movw	r20, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_u8GetPinValue+0x90>
    1246:	55 95       	asr	r21
    1248:	47 95       	ror	r20
    124a:	8a 95       	dec	r24
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_u8GetPinValue+0x8c>
    124e:	ca 01       	movw	r24, r20
    1250:	81 70       	andi	r24, 0x01	; 1
    1252:	eb 81       	ldd	r30, Y+3	; 0x03
    1254:	fc 81       	ldd	r31, Y+4	; 0x04
    1256:	80 83       	st	Z, r24
    1258:	3f c0       	rjmp	.+126    	; 0x12d8 <DIO_u8GetPinValue+0x11e>
        case DIO_u8_PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
    125a:	e6 e3       	ldi	r30, 0x36	; 54
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_u8GetPinValue+0xb8>
    126e:	55 95       	asr	r21
    1270:	47 95       	ror	r20
    1272:	8a 95       	dec	r24
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_u8GetPinValue+0xb4>
    1276:	ca 01       	movw	r24, r20
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	eb 81       	ldd	r30, Y+3	; 0x03
    127c:	fc 81       	ldd	r31, Y+4	; 0x04
    127e:	80 83       	st	Z, r24
    1280:	2b c0       	rjmp	.+86     	; 0x12d8 <DIO_u8GetPinValue+0x11e>
        case DIO_u8_PORTC: *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
    1282:	e3 e3       	ldi	r30, 0x33	; 51
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	a9 01       	movw	r20, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_u8GetPinValue+0xe0>
    1296:	55 95       	asr	r21
    1298:	47 95       	ror	r20
    129a:	8a 95       	dec	r24
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_u8GetPinValue+0xdc>
    129e:	ca 01       	movw	r24, r20
    12a0:	81 70       	andi	r24, 0x01	; 1
    12a2:	eb 81       	ldd	r30, Y+3	; 0x03
    12a4:	fc 81       	ldd	r31, Y+4	; 0x04
    12a6:	80 83       	st	Z, r24
    12a8:	17 c0       	rjmp	.+46     	; 0x12d8 <DIO_u8GetPinValue+0x11e>
        case DIO_u8_PORTD: *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
    12aa:	e0 e3       	ldi	r30, 0x30	; 48
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a9 01       	movw	r20, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_u8GetPinValue+0x108>
    12be:	55 95       	asr	r21
    12c0:	47 95       	ror	r20
    12c2:	8a 95       	dec	r24
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_u8GetPinValue+0x104>
    12c6:	ca 01       	movw	r24, r20
    12c8:	81 70       	andi	r24, 0x01	; 1
    12ca:	eb 81       	ldd	r30, Y+3	; 0x03
    12cc:	fc 81       	ldd	r31, Y+4	; 0x04
    12ce:	80 83       	st	Z, r24
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <DIO_u8GetPinValue+0x11e>
        default: return DIO_u8_NOK;
    12d2:	51 e0       	ldi	r21, 0x01	; 1
    12d4:	5f 83       	std	Y+7, r21	; 0x07
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <DIO_u8GetPinValue+0x120>
    }
    return DIO_u8_OK;
    12d8:	1f 82       	std	Y+7, r1	; 0x07
    12da:	8f 81       	ldd	r24, Y+7	; 0x07
}
    12dc:	27 96       	adiw	r28, 0x07	; 7
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <DIO_u8TogglePin>:

u8 DIO_u8TogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <DIO_u8TogglePin+0x6>
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <DIO_u8TogglePin+0x8>
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	6a 83       	std	Y+2, r22	; 0x02
    if (Copy_u8Pin > 7) return DIO_u8_NOK;
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	88 30       	cpi	r24, 0x08	; 8
    1304:	18 f0       	brcs	.+6      	; 0x130c <DIO_u8TogglePin+0x1e>
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	2d 83       	std	Y+5, r18	; 0x05
    130a:	73 c0       	rjmp	.+230    	; 0x13f2 <DIO_u8TogglePin+0x104>
    switch(Copy_u8Port)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3c 83       	std	Y+4, r19	; 0x04
    1314:	2b 83       	std	Y+3, r18	; 0x03
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	91 05       	cpc	r25, r1
    131e:	49 f1       	breq	.+82     	; 0x1372 <DIO_u8TogglePin+0x84>
    1320:	2b 81       	ldd	r18, Y+3	; 0x03
    1322:	3c 81       	ldd	r19, Y+4	; 0x04
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	2c f4       	brge	.+10     	; 0x1334 <DIO_u8TogglePin+0x46>
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	61 f0       	breq	.+24     	; 0x134a <DIO_u8TogglePin+0x5c>
    1332:	5b c0       	rjmp	.+182    	; 0x13ea <DIO_u8TogglePin+0xfc>
    1334:	2b 81       	ldd	r18, Y+3	; 0x03
    1336:	3c 81       	ldd	r19, Y+4	; 0x04
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	71 f1       	breq	.+92     	; 0x139a <DIO_u8TogglePin+0xac>
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	91 05       	cpc	r25, r1
    1346:	e9 f1       	breq	.+122    	; 0x13c2 <DIO_u8TogglePin+0xd4>
    1348:	50 c0       	rjmp	.+160    	; 0x13ea <DIO_u8TogglePin+0xfc>
    {
        case DIO_u8_PORTA: TOG_BIT(PORTA, Copy_u8Pin); break;
    134a:	ab e3       	ldi	r26, 0x3B	; 59
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_u8TogglePin+0x7a>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_u8TogglePin+0x76>
    136c:	84 27       	eor	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	3f c0       	rjmp	.+126    	; 0x13f0 <DIO_u8TogglePin+0x102>
        case DIO_u8_PORTB: TOG_BIT(PORTB, Copy_u8Pin); break;
    1372:	a8 e3       	ldi	r26, 0x38	; 56
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e8 e3       	ldi	r30, 0x38	; 56
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_u8TogglePin+0xa2>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_u8TogglePin+0x9e>
    1394:	84 27       	eor	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	2b c0       	rjmp	.+86     	; 0x13f0 <DIO_u8TogglePin+0x102>
        case DIO_u8_PORTC: TOG_BIT(PORTC, Copy_u8Pin); break;
    139a:	a5 e3       	ldi	r26, 0x35	; 53
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e5 e3       	ldi	r30, 0x35	; 53
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_u8TogglePin+0xca>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_u8TogglePin+0xc6>
    13bc:	84 27       	eor	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	17 c0       	rjmp	.+46     	; 0x13f0 <DIO_u8TogglePin+0x102>
        case DIO_u8_PORTD: TOG_BIT(PORTD, Copy_u8Pin); break;
    13c2:	a2 e3       	ldi	r26, 0x32	; 50
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e2 e3       	ldi	r30, 0x32	; 50
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_u8TogglePin+0xf2>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_u8TogglePin+0xee>
    13e4:	84 27       	eor	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <DIO_u8TogglePin+0x102>
        default: return DIO_u8_NOK;
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	9d 83       	std	Y+5, r25	; 0x05
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <DIO_u8TogglePin+0x104>
    }
    return DIO_u8_OK;
    13f0:	1d 82       	std	Y+5, r1	; 0x05
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <DIO_u8SetPortDirection>:

/* Port-level */
u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8DirectionMask)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <DIO_u8SetPortDirection+0x6>
    140a:	00 d0       	rcall	.+0      	; 0x140c <DIO_u8SetPortDirection+0x8>
    140c:	0f 92       	push	r0
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	6a 83       	std	Y+2, r22	; 0x02
    switch(Copy_u8Port)
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	3d 83       	std	Y+5, r19	; 0x05
    141e:	2c 83       	std	Y+4, r18	; 0x04
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	9d 81       	ldd	r25, Y+5	; 0x05
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	91 05       	cpc	r25, r1
    1428:	d1 f0       	breq	.+52     	; 0x145e <DIO_u8SetPortDirection+0x5a>
    142a:	2c 81       	ldd	r18, Y+4	; 0x04
    142c:	3d 81       	ldd	r19, Y+5	; 0x05
    142e:	22 30       	cpi	r18, 0x02	; 2
    1430:	31 05       	cpc	r19, r1
    1432:	2c f4       	brge	.+10     	; 0x143e <DIO_u8SetPortDirection+0x3a>
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	9d 81       	ldd	r25, Y+5	; 0x05
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	61 f0       	breq	.+24     	; 0x1454 <DIO_u8SetPortDirection+0x50>
    143c:	1f c0       	rjmp	.+62     	; 0x147c <DIO_u8SetPortDirection+0x78>
    143e:	2c 81       	ldd	r18, Y+4	; 0x04
    1440:	3d 81       	ldd	r19, Y+5	; 0x05
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	81 f0       	breq	.+32     	; 0x1468 <DIO_u8SetPortDirection+0x64>
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	91 05       	cpc	r25, r1
    1450:	81 f0       	breq	.+32     	; 0x1472 <DIO_u8SetPortDirection+0x6e>
    1452:	14 c0       	rjmp	.+40     	; 0x147c <DIO_u8SetPortDirection+0x78>
    {
        case DIO_u8_PORTA: DDRA = Copy_u8DirectionMask; break;
    1454:	ea e3       	ldi	r30, 0x3A	; 58
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	80 83       	st	Z, r24
    145c:	12 c0       	rjmp	.+36     	; 0x1482 <DIO_u8SetPortDirection+0x7e>
        case DIO_u8_PORTB: DDRB = Copy_u8DirectionMask; break;
    145e:	e7 e3       	ldi	r30, 0x37	; 55
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	80 83       	st	Z, r24
    1466:	0d c0       	rjmp	.+26     	; 0x1482 <DIO_u8SetPortDirection+0x7e>
        case DIO_u8_PORTC: DDRC = Copy_u8DirectionMask; break;
    1468:	e4 e3       	ldi	r30, 0x34	; 52
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	80 83       	st	Z, r24
    1470:	08 c0       	rjmp	.+16     	; 0x1482 <DIO_u8SetPortDirection+0x7e>
        case DIO_u8_PORTD: DDRD = Copy_u8DirectionMask; break;
    1472:	e1 e3       	ldi	r30, 0x31	; 49
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	80 83       	st	Z, r24
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <DIO_u8SetPortDirection+0x7e>
        default: return DIO_u8_NOK;
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	9b 83       	std	Y+3, r25	; 0x03
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <DIO_u8SetPortDirection+0x80>
    }
    return DIO_u8_OK;
    1482:	1b 82       	std	Y+3, r1	; 0x03
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <DIO_u8SetPortValue+0x6>
    149c:	00 d0       	rcall	.+0      	; 0x149e <DIO_u8SetPortValue+0x8>
    149e:	0f 92       	push	r0
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	6a 83       	std	Y+2, r22	; 0x02
    switch(Copy_u8Port)
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3d 83       	std	Y+5, r19	; 0x05
    14b0:	2c 83       	std	Y+4, r18	; 0x04
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	9d 81       	ldd	r25, Y+5	; 0x05
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 05       	cpc	r25, r1
    14ba:	d1 f0       	breq	.+52     	; 0x14f0 <DIO_u8SetPortValue+0x5a>
    14bc:	2c 81       	ldd	r18, Y+4	; 0x04
    14be:	3d 81       	ldd	r19, Y+5	; 0x05
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <DIO_u8SetPortValue+0x3a>
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <DIO_u8SetPortValue+0x50>
    14ce:	1f c0       	rjmp	.+62     	; 0x150e <DIO_u8SetPortValue+0x78>
    14d0:	2c 81       	ldd	r18, Y+4	; 0x04
    14d2:	3d 81       	ldd	r19, Y+5	; 0x05
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	81 f0       	breq	.+32     	; 0x14fa <DIO_u8SetPortValue+0x64>
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	81 f0       	breq	.+32     	; 0x1504 <DIO_u8SetPortValue+0x6e>
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <DIO_u8SetPortValue+0x78>
    {
        case DIO_u8_PORTA: PORTA = Copy_u8Value; break;
    14e6:	eb e3       	ldi	r30, 0x3B	; 59
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	80 83       	st	Z, r24
    14ee:	12 c0       	rjmp	.+36     	; 0x1514 <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTB: PORTB = Copy_u8Value; break;
    14f0:	e8 e3       	ldi	r30, 0x38	; 56
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	80 83       	st	Z, r24
    14f8:	0d c0       	rjmp	.+26     	; 0x1514 <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTC: PORTC = Copy_u8Value; break;
    14fa:	e5 e3       	ldi	r30, 0x35	; 53
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	80 83       	st	Z, r24
    1502:	08 c0       	rjmp	.+16     	; 0x1514 <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTD: PORTD = Copy_u8Value; break;
    1504:	e2 e3       	ldi	r30, 0x32	; 50
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	80 83       	st	Z, r24
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <DIO_u8SetPortValue+0x7e>
        default: return DIO_u8_NOK;
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	9b 83       	std	Y+3, r25	; 0x03
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <DIO_u8SetPortValue+0x80>
    }
    return DIO_u8_OK;
    1514:	1b 82       	std	Y+3, r1	; 0x03
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port, u8 *Copy_pu8Value)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <DIO_u8GetPortValue+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <DIO_u8GetPortValue+0x8>
    1530:	00 d0       	rcall	.+0      	; 0x1532 <DIO_u8GetPortValue+0xa>
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	7b 83       	std	Y+3, r23	; 0x03
    153a:	6a 83       	std	Y+2, r22	; 0x02
    if (Copy_pu8Value == (void*)0) return DIO_u8_NOK;
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	9b 81       	ldd	r25, Y+3	; 0x03
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	19 f4       	brne	.+6      	; 0x154a <DIO_u8GetPortValue+0x22>
    1544:	21 e0       	ldi	r18, 0x01	; 1
    1546:	2e 83       	std	Y+6, r18	; 0x06
    1548:	3f c0       	rjmp	.+126    	; 0x15c8 <DIO_u8GetPortValue+0xa0>
    switch(Copy_u8Port)
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3d 83       	std	Y+5, r19	; 0x05
    1552:	2c 83       	std	Y+4, r18	; 0x04
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	e1 f0       	breq	.+56     	; 0x1596 <DIO_u8GetPortValue+0x6e>
    155e:	2c 81       	ldd	r18, Y+4	; 0x04
    1560:	3d 81       	ldd	r19, Y+5	; 0x05
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	2c f4       	brge	.+10     	; 0x1572 <DIO_u8GetPortValue+0x4a>
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	61 f0       	breq	.+24     	; 0x1588 <DIO_u8GetPortValue+0x60>
    1570:	27 c0       	rjmp	.+78     	; 0x15c0 <DIO_u8GetPortValue+0x98>
    1572:	2c 81       	ldd	r18, Y+4	; 0x04
    1574:	3d 81       	ldd	r19, Y+5	; 0x05
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	a1 f0       	breq	.+40     	; 0x15a4 <DIO_u8GetPortValue+0x7c>
    157c:	8c 81       	ldd	r24, Y+4	; 0x04
    157e:	9d 81       	ldd	r25, Y+5	; 0x05
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	91 05       	cpc	r25, r1
    1584:	b1 f0       	breq	.+44     	; 0x15b2 <DIO_u8GetPortValue+0x8a>
    1586:	1c c0       	rjmp	.+56     	; 0x15c0 <DIO_u8GetPortValue+0x98>
    {
        case DIO_u8_PORTA: *Copy_pu8Value = PINA; break;
    1588:	e9 e3       	ldi	r30, 0x39	; 57
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	ea 81       	ldd	r30, Y+2	; 0x02
    1590:	fb 81       	ldd	r31, Y+3	; 0x03
    1592:	80 83       	st	Z, r24
    1594:	18 c0       	rjmp	.+48     	; 0x15c6 <DIO_u8GetPortValue+0x9e>
        case DIO_u8_PORTB: *Copy_pu8Value = PINB; break;
    1596:	e6 e3       	ldi	r30, 0x36	; 54
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	ea 81       	ldd	r30, Y+2	; 0x02
    159e:	fb 81       	ldd	r31, Y+3	; 0x03
    15a0:	80 83       	st	Z, r24
    15a2:	11 c0       	rjmp	.+34     	; 0x15c6 <DIO_u8GetPortValue+0x9e>
        case DIO_u8_PORTC: *Copy_pu8Value = PINC; break;
    15a4:	e3 e3       	ldi	r30, 0x33	; 51
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	ea 81       	ldd	r30, Y+2	; 0x02
    15ac:	fb 81       	ldd	r31, Y+3	; 0x03
    15ae:	80 83       	st	Z, r24
    15b0:	0a c0       	rjmp	.+20     	; 0x15c6 <DIO_u8GetPortValue+0x9e>
        case DIO_u8_PORTD: *Copy_pu8Value = PIND; break;
    15b2:	e0 e3       	ldi	r30, 0x30	; 48
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	ea 81       	ldd	r30, Y+2	; 0x02
    15ba:	fb 81       	ldd	r31, Y+3	; 0x03
    15bc:	80 83       	st	Z, r24
    15be:	03 c0       	rjmp	.+6      	; 0x15c6 <DIO_u8GetPortValue+0x9e>
        default: return DIO_u8_NOK;
    15c0:	91 e0       	ldi	r25, 0x01	; 1
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	01 c0       	rjmp	.+2      	; 0x15c8 <DIO_u8GetPortValue+0xa0>
    }
    return DIO_u8_OK;
    15c6:	1e 82       	std	Y+6, r1	; 0x06
    15c8:	8e 81       	ldd	r24, Y+6	; 0x06
}
    15ca:	26 96       	adiw	r28, 0x06	; 6
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <Ultrasonic_Init>:

#define ECHO_PORT      DIO_u8_PORTD
#define ECHO_PIN       DIO_u8_PIN6

void Ultrasonic_Init(void)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62

    DIO_u8SetPinDirection(TRIGGER_PORT, TRIGGER_PIN, DIO_u8_OUTPUT);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	65 e0       	ldi	r22, 0x05	; 5
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(ECHO_PORT, ECHO_PIN, DIO_u8_INPUT);
    15ee:	83 e0       	ldi	r24, 0x03	; 3
    15f0:	66 e0       	ldi	r22, 0x06	; 6
    15f2:	40 e0       	ldi	r20, 0x00	; 0
    15f4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinDirection>
}
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <Ultrasonic_ReadDistance>:

u16 Ultrasonic_ReadDistance(void)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	6d 97       	sbiw	r28, 0x1d	; 29
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    u16 count = 0;
    1612:	1c 8e       	std	Y+28, r1	; 0x1c
    1614:	1b 8e       	std	Y+27, r1	; 0x1b
    u8 echoValue = 0;
    1616:	1d 8e       	std	Y+29, r1	; 0x1d

    DIO_u8SetPinValue(TRIGGER_PORT, TRIGGER_PIN, DIO_u8_HIGH);
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	65 e0       	ldi	r22, 0x05	; 5
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a0 e2       	ldi	r26, 0x20	; 32
    1628:	b1 e4       	ldi	r27, 0x41	; 65
    162a:	8d 8b       	std	Y+21, r24	; 0x15
    162c:	9e 8b       	std	Y+22, r25	; 0x16
    162e:	af 8b       	std	Y+23, r26	; 0x17
    1630:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1632:	6d 89       	ldd	r22, Y+21	; 0x15
    1634:	7e 89       	ldd	r23, Y+22	; 0x16
    1636:	8f 89       	ldd	r24, Y+23	; 0x17
    1638:	98 8d       	ldd	r25, Y+24	; 0x18
    163a:	2b ea       	ldi	r18, 0xAB	; 171
    163c:	3a ea       	ldi	r19, 0xAA	; 170
    163e:	4a ea       	ldi	r20, 0xAA	; 170
    1640:	5e e3       	ldi	r21, 0x3E	; 62
    1642:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	89 8b       	std	Y+17, r24	; 0x11
    164c:	9a 8b       	std	Y+18, r25	; 0x12
    164e:	ab 8b       	std	Y+19, r26	; 0x13
    1650:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1652:	69 89       	ldd	r22, Y+17	; 0x11
    1654:	7a 89       	ldd	r23, Y+18	; 0x12
    1656:	8b 89       	ldd	r24, Y+19	; 0x13
    1658:	9c 89       	ldd	r25, Y+20	; 0x14
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e8       	ldi	r20, 0x80	; 128
    1660:	5f e3       	ldi	r21, 0x3F	; 63
    1662:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1666:	88 23       	and	r24, r24
    1668:	1c f4       	brge	.+6      	; 0x1670 <Ultrasonic_ReadDistance+0x72>
		__ticks = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	88 8b       	std	Y+16, r24	; 0x10
    166e:	91 c0       	rjmp	.+290    	; 0x1792 <Ultrasonic_ReadDistance+0x194>
	else if (__tmp > 255)
    1670:	69 89       	ldd	r22, Y+17	; 0x11
    1672:	7a 89       	ldd	r23, Y+18	; 0x12
    1674:	8b 89       	ldd	r24, Y+19	; 0x13
    1676:	9c 89       	ldd	r25, Y+20	; 0x14
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	4f e7       	ldi	r20, 0x7F	; 127
    167e:	53 e4       	ldi	r21, 0x43	; 67
    1680:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1684:	18 16       	cp	r1, r24
    1686:	0c f0       	brlt	.+2      	; 0x168a <Ultrasonic_ReadDistance+0x8c>
    1688:	7b c0       	rjmp	.+246    	; 0x1780 <Ultrasonic_ReadDistance+0x182>
	{
		_delay_ms(__us / 1000.0);
    168a:	6d 89       	ldd	r22, Y+21	; 0x15
    168c:	7e 89       	ldd	r23, Y+22	; 0x16
    168e:	8f 89       	ldd	r24, Y+23	; 0x17
    1690:	98 8d       	ldd	r25, Y+24	; 0x18
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4a e7       	ldi	r20, 0x7A	; 122
    1698:	54 e4       	ldi	r21, 0x44	; 68
    169a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	8c 87       	std	Y+12, r24	; 0x0c
    16a4:	9d 87       	std	Y+13, r25	; 0x0d
    16a6:	ae 87       	std	Y+14, r26	; 0x0e
    16a8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    16ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    16ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    16b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	4a e7       	ldi	r20, 0x7A	; 122
    16b8:	53 e4       	ldi	r21, 0x43	; 67
    16ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	88 87       	std	Y+8, r24	; 0x08
    16c4:	99 87       	std	Y+9, r25	; 0x09
    16c6:	aa 87       	std	Y+10, r26	; 0x0a
    16c8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    16ca:	68 85       	ldd	r22, Y+8	; 0x08
    16cc:	79 85       	ldd	r23, Y+9	; 0x09
    16ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    16d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e8       	ldi	r20, 0x80	; 128
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16de:	88 23       	and	r24, r24
    16e0:	2c f4       	brge	.+10     	; 0x16ec <Ultrasonic_ReadDistance+0xee>
		__ticks = 1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	9f 83       	std	Y+7, r25	; 0x07
    16e8:	8e 83       	std	Y+6, r24	; 0x06
    16ea:	3f c0       	rjmp	.+126    	; 0x176a <Ultrasonic_ReadDistance+0x16c>
	else if (__tmp > 65535)
    16ec:	68 85       	ldd	r22, Y+8	; 0x08
    16ee:	79 85       	ldd	r23, Y+9	; 0x09
    16f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	3f ef       	ldi	r19, 0xFF	; 255
    16f8:	4f e7       	ldi	r20, 0x7F	; 127
    16fa:	57 e4       	ldi	r21, 0x47	; 71
    16fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1700:	18 16       	cp	r1, r24
    1702:	4c f5       	brge	.+82     	; 0x1756 <Ultrasonic_ReadDistance+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1704:	6c 85       	ldd	r22, Y+12	; 0x0c
    1706:	7d 85       	ldd	r23, Y+13	; 0x0d
    1708:	8e 85       	ldd	r24, Y+14	; 0x0e
    170a:	9f 85       	ldd	r25, Y+15	; 0x0f
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e2       	ldi	r20, 0x20	; 32
    1712:	51 e4       	ldi	r21, 0x41	; 65
    1714:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	9f 83       	std	Y+7, r25	; 0x07
    172a:	8e 83       	std	Y+6, r24	; 0x06
    172c:	0f c0       	rjmp	.+30     	; 0x174c <Ultrasonic_ReadDistance+0x14e>
    172e:	89 e1       	ldi	r24, 0x19	; 25
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9d 83       	std	Y+5, r25	; 0x05
    1734:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	9d 81       	ldd	r25, Y+5	; 0x05
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <Ultrasonic_ReadDistance+0x13c>
    173e:	9d 83       	std	Y+5, r25	; 0x05
    1740:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1742:	8e 81       	ldd	r24, Y+6	; 0x06
    1744:	9f 81       	ldd	r25, Y+7	; 0x07
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	9f 83       	std	Y+7, r25	; 0x07
    174a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174c:	8e 81       	ldd	r24, Y+6	; 0x06
    174e:	9f 81       	ldd	r25, Y+7	; 0x07
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	69 f7       	brne	.-38     	; 0x172e <Ultrasonic_ReadDistance+0x130>
    1754:	24 c0       	rjmp	.+72     	; 0x179e <Ultrasonic_ReadDistance+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1756:	68 85       	ldd	r22, Y+8	; 0x08
    1758:	79 85       	ldd	r23, Y+9	; 0x09
    175a:	8a 85       	ldd	r24, Y+10	; 0x0a
    175c:	9b 85       	ldd	r25, Y+11	; 0x0b
    175e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9f 83       	std	Y+7, r25	; 0x07
    1768:	8e 83       	std	Y+6, r24	; 0x06
    176a:	8e 81       	ldd	r24, Y+6	; 0x06
    176c:	9f 81       	ldd	r25, Y+7	; 0x07
    176e:	9b 83       	std	Y+3, r25	; 0x03
    1770:	8a 83       	std	Y+2, r24	; 0x02
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	9b 81       	ldd	r25, Y+3	; 0x03
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <Ultrasonic_ReadDistance+0x178>
    177a:	9b 83       	std	Y+3, r25	; 0x03
    177c:	8a 83       	std	Y+2, r24	; 0x02
    177e:	0f c0       	rjmp	.+30     	; 0x179e <Ultrasonic_ReadDistance+0x1a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1780:	69 89       	ldd	r22, Y+17	; 0x11
    1782:	7a 89       	ldd	r23, Y+18	; 0x12
    1784:	8b 89       	ldd	r24, Y+19	; 0x13
    1786:	9c 89       	ldd	r25, Y+20	; 0x14
    1788:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	88 8b       	std	Y+16, r24	; 0x10
    1792:	88 89       	ldd	r24, Y+16	; 0x10
    1794:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	8a 95       	dec	r24
    179a:	f1 f7       	brne	.-4      	; 0x1798 <Ultrasonic_ReadDistance+0x19a>
    179c:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    DIO_u8SetPinValue(TRIGGER_PORT, TRIGGER_PIN, DIO_u8_LOW);
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	65 e0       	ldi	r22, 0x05	; 5
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>

    do {
        DIO_u8GetPinValue(ECHO_PORT, ECHO_PIN, &echoValue);
    17a8:	9e 01       	movw	r18, r28
    17aa:	23 5e       	subi	r18, 0xE3	; 227
    17ac:	3f 4f       	sbci	r19, 0xFF	; 255
    17ae:	83 e0       	ldi	r24, 0x03	; 3
    17b0:	66 e0       	ldi	r22, 0x06	; 6
    17b2:	a9 01       	movw	r20, r18
    17b4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <DIO_u8GetPinValue>
    } while (echoValue == 0);
    17b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ba:	88 23       	and	r24, r24
    17bc:	a9 f3       	breq	.-22     	; 0x17a8 <Ultrasonic_ReadDistance+0x1aa>


    TCNT2 = 0;
    17be:	e4 e4       	ldi	r30, 0x44	; 68
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	10 82       	st	Z, r1
    TCCR2 = (1 << CS21);
    17c4:	e5 e4       	ldi	r30, 0x45	; 69
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	80 83       	st	Z, r24


    do {
        DIO_u8GetPinValue(ECHO_PORT, ECHO_PIN, &echoValue);
    17cc:	9e 01       	movw	r18, r28
    17ce:	23 5e       	subi	r18, 0xE3	; 227
    17d0:	3f 4f       	sbci	r19, 0xFF	; 255
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	66 e0       	ldi	r22, 0x06	; 6
    17d6:	a9 01       	movw	r20, r18
    17d8:	0e 94 dd 08 	call	0x11ba	; 0x11ba <DIO_u8GetPinValue>

        if (TCNT2 >= 255) {
    17dc:	e4 e4       	ldi	r30, 0x44	; 68
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	8f 3f       	cpi	r24, 0xFF	; 255
    17e4:	49 f4       	brne	.+18     	; 0x17f8 <Ultrasonic_ReadDistance+0x1fa>
            count += 255;
    17e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ea:	81 50       	subi	r24, 0x01	; 1
    17ec:	9f 4f       	sbci	r25, 0xFF	; 255
    17ee:	9c 8f       	std	Y+28, r25	; 0x1c
    17f0:	8b 8f       	std	Y+27, r24	; 0x1b
            TCNT2 = 0;
    17f2:	e4 e4       	ldi	r30, 0x44	; 68
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	10 82       	st	Z, r1
        }
    } while (echoValue == 1);
    17f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	39 f3       	breq	.-50     	; 0x17cc <Ultrasonic_ReadDistance+0x1ce>

    count += TCNT2;
    17fe:	e4 e4       	ldi	r30, 0x44	; 68
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    180c:	82 0f       	add	r24, r18
    180e:	93 1f       	adc	r25, r19
    1810:	9c 8f       	std	Y+28, r25	; 0x1c
    1812:	8b 8f       	std	Y+27, r24	; 0x1b

    TCCR2 = 0;
    1814:	e5 e4       	ldi	r30, 0x45	; 69
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	10 82       	st	Z, r1

    u16 distance = count / 58;
    181a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    181c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    181e:	2a e3       	ldi	r18, 0x3A	; 58
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	b9 01       	movw	r22, r18
    1824:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__udivmodhi4>
    1828:	cb 01       	movw	r24, r22
    182a:	9a 8f       	std	Y+26, r25	; 0x1a
    182c:	89 8f       	std	Y+25, r24	; 0x19

    return distance;
    182e:	89 8d       	ldd	r24, Y+25	; 0x19
    1830:	9a 8d       	ldd	r25, Y+26	; 0x1a
}
    1832:	6d 96       	adiw	r28, 0x1d	; 29
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <Servo_Init>:
#define SERVO_MIN   65
#define SERVO_MID   175
#define SERVO_MAX   300

void Servo_Init(void)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62

	DIO_u8SetPinDirection(DIO_u8_PORTD, 5, DIO_u8_OUTPUT);
    184c:	83 e0       	ldi	r24, 0x03	; 3
    184e:	65 e0       	ldi	r22, 0x05	; 5
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinDirection>


    TCNT1 = 0;
    1856:	ec e4       	ldi	r30, 0x4C	; 76
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	11 82       	std	Z+1, r1	; 0x01
    185c:	10 82       	st	Z, r1
    ICR1  = 2499;
    185e:	e6 e4       	ldi	r30, 0x46	; 70
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	83 ec       	ldi	r24, 0xC3	; 195
    1864:	99 e0       	ldi	r25, 0x09	; 9
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	80 83       	st	Z, r24

    TCCR1A = 0;
    186a:	ef e4       	ldi	r30, 0x4F	; 79
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	10 82       	st	Z, r1
    SET_BIT(TCCR1A, WGM11);
    1870:	af e4       	ldi	r26, 0x4F	; 79
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ef e4       	ldi	r30, 0x4F	; 79
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	82 60       	ori	r24, 0x02	; 2
    187c:	8c 93       	st	X, r24
    SET_BIT(TCCR1A, COM1A1);
    187e:	af e4       	ldi	r26, 0x4F	; 79
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ef e4       	ldi	r30, 0x4F	; 79
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	80 68       	ori	r24, 0x80	; 128
    188a:	8c 93       	st	X, r24

    TCCR1B = 0;
    188c:	ee e4       	ldi	r30, 0x4E	; 78
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	10 82       	st	Z, r1
    SET_BIT(TCCR1B, WGM12);
    1892:	ae e4       	ldi	r26, 0x4E	; 78
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	ee e4       	ldi	r30, 0x4E	; 78
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	88 60       	ori	r24, 0x08	; 8
    189e:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, WGM13);
    18a0:	ae e4       	ldi	r26, 0x4E	; 78
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ee e4       	ldi	r30, 0x4E	; 78
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	80 61       	ori	r24, 0x10	; 16
    18ac:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, CS10);
    18ae:	ae e4       	ldi	r26, 0x4E	; 78
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ee e4       	ldi	r30, 0x4E	; 78
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	81 60       	ori	r24, 0x01	; 1
    18ba:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, CS11);
    18bc:	ae e4       	ldi	r26, 0x4E	; 78
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	ee e4       	ldi	r30, 0x4E	; 78
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	82 60       	ori	r24, 0x02	; 2
    18c8:	8c 93       	st	X, r24
}
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <Servo_SetAngle>:

void Servo_SetAngle(s8 angle)
{
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	2f 97       	sbiw	r28, 0x0f	; 15
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	8f 87       	std	Y+15, r24	; 0x0f

    if(angle < -90) angle = -90;
    18ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ec:	86 3a       	cpi	r24, 0xA6	; 166
    18ee:	14 f4       	brge	.+4      	; 0x18f4 <Servo_SetAngle+0x24>
    18f0:	86 ea       	ldi	r24, 0xA6	; 166
    18f2:	8f 87       	std	Y+15, r24	; 0x0f
    if(angle >  90) angle =  90;
    18f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f6:	8b 35       	cpi	r24, 0x5B	; 91
    18f8:	14 f0       	brlt	.+4      	; 0x18fe <Servo_SetAngle+0x2e>
    18fa:	8a e5       	ldi	r24, 0x5A	; 90
    18fc:	8f 87       	std	Y+15, r24	; 0x0f


    OCR1A = SERVO_MID + ((s32)angle * (SERVO_MAX - SERVO_MIN) / 180);
    18fe:	0a e4       	ldi	r16, 0x4A	; 74
    1900:	10 e0       	ldi	r17, 0x00	; 0
    1902:	8f 85       	ldd	r24, Y+15	; 0x0f
    1904:	99 27       	eor	r25, r25
    1906:	87 fd       	sbrc	r24, 7
    1908:	90 95       	com	r25
    190a:	a9 2f       	mov	r26, r25
    190c:	b9 2f       	mov	r27, r25
    190e:	2b ee       	ldi	r18, 0xEB	; 235
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsi3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	24 eb       	ldi	r18, 0xB4	; 180
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 97 18 	call	0x312e	; 0x312e <__divmodsi4>
    1932:	da 01       	movw	r26, r20
    1934:	c9 01       	movw	r24, r18
    1936:	81 55       	subi	r24, 0x51	; 81
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	f8 01       	movw	r30, r16
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	80 83       	st	Z, r24
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	aa ef       	ldi	r26, 0xFA	; 250
    1946:	b3 e4       	ldi	r27, 0x43	; 67
    1948:	8b 87       	std	Y+11, r24	; 0x0b
    194a:	9c 87       	std	Y+12, r25	; 0x0c
    194c:	ad 87       	std	Y+13, r26	; 0x0d
    194e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	6b 85       	ldd	r22, Y+11	; 0x0b
    1952:	7c 85       	ldd	r23, Y+12	; 0x0c
    1954:	8d 85       	ldd	r24, Y+13	; 0x0d
    1956:	9e 85       	ldd	r25, Y+14	; 0x0e
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a e7       	ldi	r20, 0x7A	; 122
    195e:	53 e4       	ldi	r21, 0x43	; 67
    1960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8f 83       	std	Y+7, r24	; 0x07
    196a:	98 87       	std	Y+8, r25	; 0x08
    196c:	a9 87       	std	Y+9, r26	; 0x09
    196e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1970:	6f 81       	ldd	r22, Y+7	; 0x07
    1972:	78 85       	ldd	r23, Y+8	; 0x08
    1974:	89 85       	ldd	r24, Y+9	; 0x09
    1976:	9a 85       	ldd	r25, Y+10	; 0x0a
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1984:	88 23       	and	r24, r24
    1986:	2c f4       	brge	.+10     	; 0x1992 <Servo_SetAngle+0xc2>
		__ticks = 1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <Servo_SetAngle+0x140>
	else if (__tmp > 65535)
    1992:	6f 81       	ldd	r22, Y+7	; 0x07
    1994:	78 85       	ldd	r23, Y+8	; 0x08
    1996:	89 85       	ldd	r24, Y+9	; 0x09
    1998:	9a 85       	ldd	r25, Y+10	; 0x0a
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	4c f5       	brge	.+82     	; 0x19fc <Servo_SetAngle+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e2       	ldi	r20, 0x20	; 32
    19b8:	51 e4       	ldi	r21, 0x41	; 65
    19ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <Servo_SetAngle+0x122>
    19d4:	89 e1       	ldi	r24, 0x19	; 25
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9c 83       	std	Y+4, r25	; 0x04
    19da:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <Servo_SetAngle+0x110>
    19e4:	9c 83       	std	Y+4, r25	; 0x04
    19e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9e 83       	std	Y+6, r25	; 0x06
    19f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <Servo_SetAngle+0x104>
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <Servo_SetAngle+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	6f 81       	ldd	r22, Y+7	; 0x07
    19fe:	78 85       	ldd	r23, Y+8	; 0x08
    1a00:	89 85       	ldd	r24, Y+9	; 0x09
    1a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	9e 81       	ldd	r25, Y+6	; 0x06
    1a14:	9a 83       	std	Y+2, r25	; 0x02
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <Servo_SetAngle+0x14c>
    1a20:	9a 83       	std	Y+2, r25	; 0x02
    1a22:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(500);
}
    1a24:	2f 96       	adiw	r28, 0x0f	; 15
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <Motors_Init>:
#include "../../LIB/STD_TYPES.h"
#include "../../MCALL/DIO/DIO_Interface.h"
#include "MOTOR_Interface.h"

void Motors_Init(void) {
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinDirection(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_OUTPUT);
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_OUTPUT);
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	61 e0       	ldi	r22, 0x01	; 1
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_OUTPUT);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	62 e0       	ldi	r22, 0x02	; 2
    1a5a:	41 e0       	ldi	r20, 0x01	; 1
    1a5c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinDirection>
    DIO_u8SetPinDirection(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_OUTPUT);
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	64 e0       	ldi	r22, 0x04	; 4
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	0e 94 fd 06 	call	0xdfa	; 0xdfa <DIO_u8SetPinDirection>
}
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <Motors_Stop>:

void Motors_Stop(void) {
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_LOW);
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_LOW);
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW);
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	62 e0       	ldi	r22, 0x02	; 2
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_LOW);
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	64 e0       	ldi	r22, 0x04	; 4
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
}
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <Motors_Forward>:

void Motors_Forward(void) {
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_HIGH);
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_HIGH);
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	64 e0       	ldi	r22, 0x04	; 4
    1abc:	41 e0       	ldi	r20, 0x01	; 1
    1abe:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_LOW);
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW);
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	62 e0       	ldi	r22, 0x02	; 2
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
}
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <Motors_Backward>:

void Motors_Backward(void) {
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_HIGH);
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_HIGH);
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	62 e0       	ldi	r22, 0x02	; 2
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_LOW);
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_LOW);
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	64 e0       	ldi	r22, 0x04	; 4
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <Motors_Left>:

void Motors_Left(void) {
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_HIGH);
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_HIGH);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	62 e0       	ldi	r22, 0x02	; 2
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_LOW);
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_LOW);
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	64 e0       	ldi	r22, 0x04	; 4
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
}
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <Motors_Right>:

void Motors_Right(void) {
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_HIGH);
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	41 e0       	ldi	r20, 0x01	; 1
    1b56:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_HIGH);
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	64 e0       	ldi	r22, 0x04	; 4
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_LOW);
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_u8SetPinValue>
}
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <I2C_LCD_Write>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include "../../MCALL/I2C/I2C_Interface.h"
#include "LCD_I2C_Interface.h"

void I2C_LCD_Write(u8 data) {
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	0f 92       	push	r0
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	89 83       	std	Y+1, r24	; 0x01
    I2C_Start();
    1b8a:	0e 94 cb 06 	call	0xd96	; 0xd96 <I2C_Start>
    I2C_Write(LCD_ADDR << 1);
    1b8e:	8e e4       	ldi	r24, 0x4E	; 78
    1b90:	0e 94 e6 06 	call	0xdcc	; 0xdcc <I2C_Write>
    I2C_Write(data | LCD_BACKLIGHT);
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	88 60       	ori	r24, 0x08	; 8
    1b98:	0e 94 e6 06 	call	0xdcc	; 0xdcc <I2C_Write>
    I2C_Stop();
    1b9c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <I2C_Stop>
}
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <LCD_Pulse>:

void LCD_Pulse(u8 data) {
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	e1 97       	sbiw	r28, 0x31	; 49
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	89 ab       	std	Y+49, r24	; 0x31
    I2C_LCD_Write(data | ENABLE);
    1bbe:	89 a9       	ldd	r24, Y+49	; 0x31
    1bc0:	84 60       	ori	r24, 0x04	; 4
    1bc2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <I2C_LCD_Write>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a0 e8       	ldi	r26, 0x80	; 128
    1bcc:	bf e3       	ldi	r27, 0x3F	; 63
    1bce:	8d a7       	std	Y+45, r24	; 0x2d
    1bd0:	9e a7       	std	Y+46, r25	; 0x2e
    1bd2:	af a7       	std	Y+47, r26	; 0x2f
    1bd4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bd6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1bd8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1bda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bdc:	98 a9       	ldd	r25, Y+48	; 0x30
    1bde:	2b ea       	ldi	r18, 0xAB	; 171
    1be0:	3a ea       	ldi	r19, 0xAA	; 170
    1be2:	4a ea       	ldi	r20, 0xAA	; 170
    1be4:	5e e3       	ldi	r21, 0x3E	; 62
    1be6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	89 a7       	std	Y+41, r24	; 0x29
    1bf0:	9a a7       	std	Y+42, r25	; 0x2a
    1bf2:	ab a7       	std	Y+43, r26	; 0x2b
    1bf4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1bf6:	69 a5       	ldd	r22, Y+41	; 0x29
    1bf8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bfc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e8       	ldi	r20, 0x80	; 128
    1c04:	5f e3       	ldi	r21, 0x3F	; 63
    1c06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c0a:	88 23       	and	r24, r24
    1c0c:	1c f4       	brge	.+6      	; 0x1c14 <LCD_Pulse+0x6c>
		__ticks = 1;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	88 a7       	std	Y+40, r24	; 0x28
    1c12:	91 c0       	rjmp	.+290    	; 0x1d36 <LCD_Pulse+0x18e>
	else if (__tmp > 255)
    1c14:	69 a5       	ldd	r22, Y+41	; 0x29
    1c16:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c18:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	4f e7       	ldi	r20, 0x7F	; 127
    1c22:	53 e4       	ldi	r21, 0x43	; 67
    1c24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c28:	18 16       	cp	r1, r24
    1c2a:	0c f0       	brlt	.+2      	; 0x1c2e <LCD_Pulse+0x86>
    1c2c:	7b c0       	rjmp	.+246    	; 0x1d24 <LCD_Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1c2e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c30:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c34:	98 a9       	ldd	r25, Y+48	; 0x30
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	4a e7       	ldi	r20, 0x7A	; 122
    1c3c:	54 e4       	ldi	r21, 0x44	; 68
    1c3e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	8c a3       	std	Y+36, r24	; 0x24
    1c48:	9d a3       	std	Y+37, r25	; 0x25
    1c4a:	ae a3       	std	Y+38, r26	; 0x26
    1c4c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4e:	6c a1       	ldd	r22, Y+36	; 0x24
    1c50:	7d a1       	ldd	r23, Y+37	; 0x25
    1c52:	8e a1       	ldd	r24, Y+38	; 0x26
    1c54:	9f a1       	ldd	r25, Y+39	; 0x27
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a e7       	ldi	r20, 0x7A	; 122
    1c5c:	53 e4       	ldi	r21, 0x43	; 67
    1c5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	88 a3       	std	Y+32, r24	; 0x20
    1c68:	99 a3       	std	Y+33, r25	; 0x21
    1c6a:	aa a3       	std	Y+34, r26	; 0x22
    1c6c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1c6e:	68 a1       	ldd	r22, Y+32	; 0x20
    1c70:	79 a1       	ldd	r23, Y+33	; 0x21
    1c72:	8a a1       	ldd	r24, Y+34	; 0x22
    1c74:	9b a1       	ldd	r25, Y+35	; 0x23
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <LCD_Pulse+0xe8>
		__ticks = 1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9f 8f       	std	Y+31, r25	; 0x1f
    1c8c:	8e 8f       	std	Y+30, r24	; 0x1e
    1c8e:	3f c0       	rjmp	.+126    	; 0x1d0e <LCD_Pulse+0x166>
	else if (__tmp > 65535)
    1c90:	68 a1       	ldd	r22, Y+32	; 0x20
    1c92:	79 a1       	ldd	r23, Y+33	; 0x21
    1c94:	8a a1       	ldd	r24, Y+34	; 0x22
    1c96:	9b a1       	ldd	r25, Y+35	; 0x23
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	3f ef       	ldi	r19, 0xFF	; 255
    1c9c:	4f e7       	ldi	r20, 0x7F	; 127
    1c9e:	57 e4       	ldi	r21, 0x47	; 71
    1ca0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ca4:	18 16       	cp	r1, r24
    1ca6:	4c f5       	brge	.+82     	; 0x1cfa <LCD_Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	6c a1       	ldd	r22, Y+36	; 0x24
    1caa:	7d a1       	ldd	r23, Y+37	; 0x25
    1cac:	8e a1       	ldd	r24, Y+38	; 0x26
    1cae:	9f a1       	ldd	r25, Y+39	; 0x27
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e2       	ldi	r20, 0x20	; 32
    1cb6:	51 e4       	ldi	r21, 0x41	; 65
    1cb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9f 8f       	std	Y+31, r25	; 0x1f
    1cce:	8e 8f       	std	Y+30, r24	; 0x1e
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <LCD_Pulse+0x148>
    1cd2:	89 e1       	ldi	r24, 0x19	; 25
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9d 8f       	std	Y+29, r25	; 0x1d
    1cd8:	8c 8f       	std	Y+28, r24	; 0x1c
    1cda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cdc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_Pulse+0x136>
    1ce2:	9d 8f       	std	Y+29, r25	; 0x1d
    1ce4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ce8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	9f 8f       	std	Y+31, r25	; 0x1f
    1cee:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cf2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	69 f7       	brne	.-38     	; 0x1cd2 <LCD_Pulse+0x12a>
    1cf8:	24 c0       	rjmp	.+72     	; 0x1d42 <LCD_Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfa:	68 a1       	ldd	r22, Y+32	; 0x20
    1cfc:	79 a1       	ldd	r23, Y+33	; 0x21
    1cfe:	8a a1       	ldd	r24, Y+34	; 0x22
    1d00:	9b a1       	ldd	r25, Y+35	; 0x23
    1d02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9f 8f       	std	Y+31, r25	; 0x1f
    1d0c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d10:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d12:	9b 8f       	std	Y+27, r25	; 0x1b
    1d14:	8a 8f       	std	Y+26, r24	; 0x1a
    1d16:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d18:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_Pulse+0x172>
    1d1e:	9b 8f       	std	Y+27, r25	; 0x1b
    1d20:	8a 8f       	std	Y+26, r24	; 0x1a
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <LCD_Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d24:	69 a5       	ldd	r22, Y+41	; 0x29
    1d26:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d28:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	88 a7       	std	Y+40, r24	; 0x28
    1d36:	88 a5       	ldd	r24, Y+40	; 0x28
    1d38:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d3a:	89 8d       	ldd	r24, Y+25	; 0x19
    1d3c:	8a 95       	dec	r24
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <LCD_Pulse+0x194>
    1d40:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    I2C_LCD_Write(data & ~ENABLE);
    1d42:	89 a9       	ldd	r24, Y+49	; 0x31
    1d44:	8b 7f       	andi	r24, 0xFB	; 251
    1d46:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <I2C_LCD_Write>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a8 e4       	ldi	r26, 0x48	; 72
    1d50:	b2 e4       	ldi	r27, 0x42	; 66
    1d52:	8d 8b       	std	Y+21, r24	; 0x15
    1d54:	9e 8b       	std	Y+22, r25	; 0x16
    1d56:	af 8b       	std	Y+23, r26	; 0x17
    1d58:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d60:	98 8d       	ldd	r25, Y+24	; 0x18
    1d62:	2b ea       	ldi	r18, 0xAB	; 171
    1d64:	3a ea       	ldi	r19, 0xAA	; 170
    1d66:	4a ea       	ldi	r20, 0xAA	; 170
    1d68:	5e e3       	ldi	r21, 0x3E	; 62
    1d6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	89 8b       	std	Y+17, r24	; 0x11
    1d74:	9a 8b       	std	Y+18, r25	; 0x12
    1d76:	ab 8b       	std	Y+19, r26	; 0x13
    1d78:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d7a:	69 89       	ldd	r22, Y+17	; 0x11
    1d7c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d80:	9c 89       	ldd	r25, Y+20	; 0x14
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	1c f4       	brge	.+6      	; 0x1d98 <LCD_Pulse+0x1f0>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	88 8b       	std	Y+16, r24	; 0x10
    1d96:	91 c0       	rjmp	.+290    	; 0x1eba <LCD_Pulse+0x312>
	else if (__tmp > 255)
    1d98:	69 89       	ldd	r22, Y+17	; 0x11
    1d9a:	7a 89       	ldd	r23, Y+18	; 0x12
    1d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	53 e4       	ldi	r21, 0x43	; 67
    1da8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	0c f0       	brlt	.+2      	; 0x1db2 <LCD_Pulse+0x20a>
    1db0:	7b c0       	rjmp	.+246    	; 0x1ea8 <LCD_Pulse+0x300>
	{
		_delay_ms(__us / 1000.0);
    1db2:	6d 89       	ldd	r22, Y+21	; 0x15
    1db4:	7e 89       	ldd	r23, Y+22	; 0x16
    1db6:	8f 89       	ldd	r24, Y+23	; 0x17
    1db8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a e7       	ldi	r20, 0x7A	; 122
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	8c 87       	std	Y+12, r24	; 0x0c
    1dcc:	9d 87       	std	Y+13, r25	; 0x0d
    1dce:	ae 87       	std	Y+14, r26	; 0x0e
    1dd0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dd4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	4a e7       	ldi	r20, 0x7A	; 122
    1de0:	53 e4       	ldi	r21, 0x43	; 67
    1de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	88 87       	std	Y+8, r24	; 0x08
    1dec:	99 87       	std	Y+9, r25	; 0x09
    1dee:	aa 87       	std	Y+10, r26	; 0x0a
    1df0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1df2:	68 85       	ldd	r22, Y+8	; 0x08
    1df4:	79 85       	ldd	r23, Y+9	; 0x09
    1df6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1df8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <LCD_Pulse+0x26c>
		__ticks = 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9f 83       	std	Y+7, r25	; 0x07
    1e10:	8e 83       	std	Y+6, r24	; 0x06
    1e12:	3f c0       	rjmp	.+126    	; 0x1e92 <LCD_Pulse+0x2ea>
	else if (__tmp > 65535)
    1e14:	68 85       	ldd	r22, Y+8	; 0x08
    1e16:	79 85       	ldd	r23, Y+9	; 0x09
    1e18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	3f ef       	ldi	r19, 0xFF	; 255
    1e20:	4f e7       	ldi	r20, 0x7F	; 127
    1e22:	57 e4       	ldi	r21, 0x47	; 71
    1e24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e28:	18 16       	cp	r1, r24
    1e2a:	4c f5       	brge	.+82     	; 0x1e7e <LCD_Pulse+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e2e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e30:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e32:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e2       	ldi	r20, 0x20	; 32
    1e3a:	51 e4       	ldi	r21, 0x41	; 65
    1e3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9f 83       	std	Y+7, r25	; 0x07
    1e52:	8e 83       	std	Y+6, r24	; 0x06
    1e54:	0f c0       	rjmp	.+30     	; 0x1e74 <LCD_Pulse+0x2cc>
    1e56:	89 e1       	ldi	r24, 0x19	; 25
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9d 83       	std	Y+5, r25	; 0x05
    1e5c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	9d 81       	ldd	r25, Y+5	; 0x05
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <LCD_Pulse+0x2ba>
    1e66:	9d 83       	std	Y+5, r25	; 0x05
    1e68:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	9f 83       	std	Y+7, r25	; 0x07
    1e72:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e74:	8e 81       	ldd	r24, Y+6	; 0x06
    1e76:	9f 81       	ldd	r25, Y+7	; 0x07
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	69 f7       	brne	.-38     	; 0x1e56 <LCD_Pulse+0x2ae>
    1e7c:	24 c0       	rjmp	.+72     	; 0x1ec6 <LCD_Pulse+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7e:	68 85       	ldd	r22, Y+8	; 0x08
    1e80:	79 85       	ldd	r23, Y+9	; 0x09
    1e82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e84:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9f 83       	std	Y+7, r25	; 0x07
    1e90:	8e 83       	std	Y+6, r24	; 0x06
    1e92:	8e 81       	ldd	r24, Y+6	; 0x06
    1e94:	9f 81       	ldd	r25, Y+7	; 0x07
    1e96:	9b 83       	std	Y+3, r25	; 0x03
    1e98:	8a 83       	std	Y+2, r24	; 0x02
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <LCD_Pulse+0x2f6>
    1ea2:	9b 83       	std	Y+3, r25	; 0x03
    1ea4:	8a 83       	std	Y+2, r24	; 0x02
    1ea6:	0f c0       	rjmp	.+30     	; 0x1ec6 <LCD_Pulse+0x31e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ea8:	69 89       	ldd	r22, Y+17	; 0x11
    1eaa:	7a 89       	ldd	r23, Y+18	; 0x12
    1eac:	8b 89       	ldd	r24, Y+19	; 0x13
    1eae:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	88 8b       	std	Y+16, r24	; 0x10
    1eba:	88 89       	ldd	r24, Y+16	; 0x10
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	8a 95       	dec	r24
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LCD_Pulse+0x318>
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(50);
}
    1ec6:	e1 96       	adiw	r28, 0x31	; 49
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <LCD_Command>:

void LCD_Command(u8 cmd) {
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <LCD_Command+0x6>
    1ede:	0f 92       	push	r0
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	8b 83       	std	Y+3, r24	; 0x03
    u8 high = cmd & 0xF0;
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	80 7f       	andi	r24, 0xF0	; 240
    1eea:	8a 83       	std	Y+2, r24	; 0x02
    u8 low  = (cmd << 4) & 0xF0;
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	82 95       	swap	r24
    1ef4:	92 95       	swap	r25
    1ef6:	90 7f       	andi	r25, 0xF0	; 240
    1ef8:	98 27       	eor	r25, r24
    1efa:	80 7f       	andi	r24, 0xF0	; 240
    1efc:	98 27       	eor	r25, r24
    1efe:	89 83       	std	Y+1, r24	; 0x01
    I2C_LCD_Write(high);
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <I2C_LCD_Write>
    LCD_Pulse(high);
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_Pulse>
    I2C_LCD_Write(low);
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <I2C_LCD_Write>
    LCD_Pulse(low);
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_Pulse>
}
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <LCD_Char>:

void LCD_Char(u8 data) {
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	00 d0       	rcall	.+0      	; 0x1f2a <LCD_Char+0x6>
    1f2a:	0f 92       	push	r0
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	8b 83       	std	Y+3, r24	; 0x03
    u8 high = (data & 0xF0) | 0x01;
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	80 7f       	andi	r24, 0xF0	; 240
    1f36:	81 60       	ori	r24, 0x01	; 1
    1f38:	8a 83       	std	Y+2, r24	; 0x02
    u8 low  = ((data << 4) & 0xF0) | 0x01;
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	82 95       	swap	r24
    1f42:	92 95       	swap	r25
    1f44:	90 7f       	andi	r25, 0xF0	; 240
    1f46:	98 27       	eor	r25, r24
    1f48:	80 7f       	andi	r24, 0xF0	; 240
    1f4a:	98 27       	eor	r25, r24
    1f4c:	81 60       	ori	r24, 0x01	; 1
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    I2C_LCD_Write(high);
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <I2C_LCD_Write>
    LCD_Pulse(high);
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_Pulse>
    I2C_LCD_Write(low);
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <I2C_LCD_Write>
    LCD_Pulse(low);
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_Pulse>
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <LCD_Init>:

void LCD_Init(void) {
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	6c 97       	sbiw	r28, 0x1c	; 28
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	a8 e4       	ldi	r26, 0x48	; 72
    1f8e:	b2 e4       	ldi	r27, 0x42	; 66
    1f90:	89 8f       	std	Y+25, r24	; 0x19
    1f92:	9a 8f       	std	Y+26, r25	; 0x1a
    1f94:	ab 8f       	std	Y+27, r26	; 0x1b
    1f96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f98:	69 8d       	ldd	r22, Y+25	; 0x19
    1f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	4a e7       	ldi	r20, 0x7A	; 122
    1fa6:	53 e4       	ldi	r21, 0x43	; 67
    1fa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8d 8b       	std	Y+21, r24	; 0x15
    1fb2:	9e 8b       	std	Y+22, r25	; 0x16
    1fb4:	af 8b       	std	Y+23, r26	; 0x17
    1fb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fba:	7e 89       	ldd	r23, Y+22	; 0x16
    1fbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e8       	ldi	r20, 0x80	; 128
    1fc6:	5f e3       	ldi	r21, 0x3F	; 63
    1fc8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fcc:	88 23       	and	r24, r24
    1fce:	2c f4       	brge	.+10     	; 0x1fda <LCD_Init+0x66>
		__ticks = 1;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9c 8b       	std	Y+20, r25	; 0x14
    1fd6:	8b 8b       	std	Y+19, r24	; 0x13
    1fd8:	3f c0       	rjmp	.+126    	; 0x2058 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    1fda:	6d 89       	ldd	r22, Y+21	; 0x15
    1fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fde:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	3f ef       	ldi	r19, 0xFF	; 255
    1fe6:	4f e7       	ldi	r20, 0x7F	; 127
    1fe8:	57 e4       	ldi	r21, 0x47	; 71
    1fea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fee:	18 16       	cp	r1, r24
    1ff0:	4c f5       	brge	.+82     	; 0x2044 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e2       	ldi	r20, 0x20	; 32
    2000:	51 e4       	ldi	r21, 0x41	; 65
    2002:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9c 8b       	std	Y+20, r25	; 0x14
    2018:	8b 8b       	std	Y+19, r24	; 0x13
    201a:	0f c0       	rjmp	.+30     	; 0x203a <LCD_Init+0xc6>
    201c:	89 e1       	ldi	r24, 0x19	; 25
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9a 8b       	std	Y+18, r25	; 0x12
    2022:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2024:	89 89       	ldd	r24, Y+17	; 0x11
    2026:	9a 89       	ldd	r25, Y+18	; 0x12
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_Init+0xb4>
    202c:	9a 8b       	std	Y+18, r25	; 0x12
    202e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2030:	8b 89       	ldd	r24, Y+19	; 0x13
    2032:	9c 89       	ldd	r25, Y+20	; 0x14
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	9c 8b       	std	Y+20, r25	; 0x14
    2038:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203a:	8b 89       	ldd	r24, Y+19	; 0x13
    203c:	9c 89       	ldd	r25, Y+20	; 0x14
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	69 f7       	brne	.-38     	; 0x201c <LCD_Init+0xa8>
    2042:	14 c0       	rjmp	.+40     	; 0x206c <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2044:	6d 89       	ldd	r22, Y+21	; 0x15
    2046:	7e 89       	ldd	r23, Y+22	; 0x16
    2048:	8f 89       	ldd	r24, Y+23	; 0x17
    204a:	98 8d       	ldd	r25, Y+24	; 0x18
    204c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9c 8b       	std	Y+20, r25	; 0x14
    2056:	8b 8b       	std	Y+19, r24	; 0x13
    2058:	8b 89       	ldd	r24, Y+19	; 0x13
    205a:	9c 89       	ldd	r25, Y+20	; 0x14
    205c:	98 8b       	std	Y+16, r25	; 0x10
    205e:	8f 87       	std	Y+15, r24	; 0x0f
    2060:	8f 85       	ldd	r24, Y+15	; 0x0f
    2062:	98 89       	ldd	r25, Y+16	; 0x10
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <LCD_Init+0xf0>
    2068:	98 8b       	std	Y+16, r25	; 0x10
    206a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(50);
    LCD_Command(0x33);
    206c:	83 e3       	ldi	r24, 0x33	; 51
    206e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
    LCD_Command(0x32);
    2072:	82 e3       	ldi	r24, 0x32	; 50
    2074:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
    LCD_Command(0x28);
    2078:	88 e2       	ldi	r24, 0x28	; 40
    207a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
    LCD_Command(0x0C);
    207e:	8c e0       	ldi	r24, 0x0C	; 12
    2080:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
    LCD_Command(0x06);
    2084:	86 e0       	ldi	r24, 0x06	; 6
    2086:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
    LCD_Command(0x01);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a0 e0       	ldi	r26, 0x00	; 0
    2096:	b0 e4       	ldi	r27, 0x40	; 64
    2098:	8b 87       	std	Y+11, r24	; 0x0b
    209a:	9c 87       	std	Y+12, r25	; 0x0c
    209c:	ad 87       	std	Y+13, r26	; 0x0d
    209e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a e7       	ldi	r20, 0x7A	; 122
    20ae:	53 e4       	ldi	r21, 0x43	; 67
    20b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	8f 83       	std	Y+7, r24	; 0x07
    20ba:	98 87       	std	Y+8, r25	; 0x08
    20bc:	a9 87       	std	Y+9, r26	; 0x09
    20be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c0:	6f 81       	ldd	r22, Y+7	; 0x07
    20c2:	78 85       	ldd	r23, Y+8	; 0x08
    20c4:	89 85       	ldd	r24, Y+9	; 0x09
    20c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20d4:	88 23       	and	r24, r24
    20d6:	2c f4       	brge	.+10     	; 0x20e2 <LCD_Init+0x16e>
		__ticks = 1;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
    20e0:	3f c0       	rjmp	.+126    	; 0x2160 <LCD_Init+0x1ec>
	else if (__tmp > 65535)
    20e2:	6f 81       	ldd	r22, Y+7	; 0x07
    20e4:	78 85       	ldd	r23, Y+8	; 0x08
    20e6:	89 85       	ldd	r24, Y+9	; 0x09
    20e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20f6:	18 16       	cp	r1, r24
    20f8:	4c f5       	brge	.+82     	; 0x214c <LCD_Init+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2100:	9e 85       	ldd	r25, Y+14	; 0x0e
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <LCD_Init+0x1ce>
    2124:	89 e1       	ldi	r24, 0x19	; 25
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	8b 83       	std	Y+3, r24	; 0x03
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	9c 81       	ldd	r25, Y+4	; 0x04
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <LCD_Init+0x1bc>
    2134:	9c 83       	std	Y+4, r25	; 0x04
    2136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	69 f7       	brne	.-38     	; 0x2124 <LCD_Init+0x1b0>
    214a:	14 c0       	rjmp	.+40     	; 0x2174 <LCD_Init+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214c:	6f 81       	ldd	r22, Y+7	; 0x07
    214e:	78 85       	ldd	r23, Y+8	; 0x08
    2150:	89 85       	ldd	r24, Y+9	; 0x09
    2152:	9a 85       	ldd	r25, Y+10	; 0x0a
    2154:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9e 83       	std	Y+6, r25	; 0x06
    215e:	8d 83       	std	Y+5, r24	; 0x05
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	9a 83       	std	Y+2, r25	; 0x02
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <LCD_Init+0x1f8>
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    2174:	6c 96       	adiw	r28, 0x1c	; 28
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <LCD_String>:

void LCD_String(const char *str)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	00 d0       	rcall	.+0      	; 0x218c <LCD_String+0x6>
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	0b c0       	rjmp	.+22     	; 0x21ac <LCD_String+0x26>
    while(*str) {
        LCD_Char(*str++);
    2196:	e9 81       	ldd	r30, Y+1	; 0x01
    2198:	fa 81       	ldd	r31, Y+2	; 0x02
    219a:	20 81       	ld	r18, Z
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	9a 81       	ldd	r25, Y+2	; 0x02
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	9a 83       	std	Y+2, r25	; 0x02
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	82 2f       	mov	r24, r18
    21a8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <LCD_Char>
    _delay_ms(2);
}

void LCD_String(const char *str)
{
    while(*str) {
    21ac:	e9 81       	ldd	r30, Y+1	; 0x01
    21ae:	fa 81       	ldd	r31, Y+2	; 0x02
    21b0:	80 81       	ld	r24, Z
    21b2:	88 23       	and	r24, r24
    21b4:	81 f7       	brne	.-32     	; 0x2196 <LCD_String+0x10>
        LCD_Char(*str++);
    }
}
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <LCD_SetCursor>:

void LCD_SetCursor(u8 row, u8 col) {
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <LCD_SetCursor+0x6>
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	8a 83       	std	Y+2, r24	; 0x02
    21ce:	6b 83       	std	Y+3, r22	; 0x03
    u8 pos;
    if(row == 0) pos = 0x80 + col;
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	88 23       	and	r24, r24
    21d4:	21 f4       	brne	.+8      	; 0x21de <LCD_SetCursor+0x1e>
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	80 58       	subi	r24, 0x80	; 128
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	03 c0       	rjmp	.+6      	; 0x21e4 <LCD_SetCursor+0x24>
    else         pos = 0xC0 + col;
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	80 54       	subi	r24, 0x40	; 64
    21e2:	89 83       	std	Y+1, r24	; 0x01
    LCD_Command(pos);
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
}
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <main>:

#define THRESHOLD 15

typedef enum {MODE_AUTO, MODE_MANUAL} Mode;

int main(void) {
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	c6 5a       	subi	r28, 0xA6	; 166
    2204:	d0 40       	sbci	r29, 0x00	; 0
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	f8 94       	cli
    220a:	de bf       	out	0x3e, r29	; 62
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	cd bf       	out	0x3d, r28	; 61
    char buffer[16];
    unsigned char command;
    Mode currentMode = MODE_AUTO;
    2210:	fe 01       	movw	r30, r28
    2212:	ed 56       	subi	r30, 0x6D	; 109
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	10 82       	st	Z, r1

    Ultrasonic_Init();
    2218:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <Ultrasonic_Init>
    Servo_Init();
    221c:	0e 94 22 0c 	call	0x1844	; 0x1844 <Servo_Init>
    I2C_Init();
    2220:	0e 94 bd 06 	call	0xd7a	; 0xd7a <I2C_Init>
    LCD_Init();
    2224:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_Init>
    UART_Init(9600);
    2228:	80 e8       	ldi	r24, 0x80	; 128
    222a:	95 e2       	ldi	r25, 0x25	; 37
    222c:	0e 94 47 06 	call	0xc8e	; 0xc8e <UART_Init>
    Motors_Stop();
    2230:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Motors_Stop>
    2234:	fe 01       	movw	r30, r28
    2236:	e7 57       	subi	r30, 0x77	; 119
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	aa ef       	ldi	r26, 0xFA	; 250
    2240:	b4 e4       	ldi	r27, 0x44	; 68
    2242:	80 83       	st	Z, r24
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	a2 83       	std	Z+2, r26	; 0x02
    2248:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	8e 01       	movw	r16, r28
    224c:	0b 57       	subi	r16, 0x7B	; 123
    224e:	1f 4f       	sbci	r17, 0xFF	; 255
    2250:	fe 01       	movw	r30, r28
    2252:	e7 57       	subi	r30, 0x77	; 119
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	60 81       	ld	r22, Z
    2258:	71 81       	ldd	r23, Z+1	; 0x01
    225a:	82 81       	ldd	r24, Z+2	; 0x02
    225c:	93 81       	ldd	r25, Z+3	; 0x03
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	4a e7       	ldi	r20, 0x7A	; 122
    2264:	53 e4       	ldi	r21, 0x43	; 67
    2266:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	f8 01       	movw	r30, r16
    2270:	80 83       	st	Z, r24
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	a2 83       	std	Z+2, r26	; 0x02
    2276:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2278:	fe 01       	movw	r30, r28
    227a:	eb 57       	subi	r30, 0x7B	; 123
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e8       	ldi	r20, 0x80	; 128
    228c:	5f e3       	ldi	r21, 0x3F	; 63
    228e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2292:	88 23       	and	r24, r24
    2294:	44 f4       	brge	.+16     	; 0x22a6 <main+0xb0>
		__ticks = 1;
    2296:	fe 01       	movw	r30, r28
    2298:	ed 57       	subi	r30, 0x7D	; 125
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	80 83       	st	Z, r24
    22a4:	64 c0       	rjmp	.+200    	; 0x236e <main+0x178>
	else if (__tmp > 65535)
    22a6:	fe 01       	movw	r30, r28
    22a8:	eb 57       	subi	r30, 0x7B	; 123
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	57 e4       	ldi	r21, 0x47	; 71
    22bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	0c f0       	brlt	.+2      	; 0x22c6 <main+0xd0>
    22c4:	43 c0       	rjmp	.+134    	; 0x234c <main+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	fe 01       	movw	r30, r28
    22c8:	e7 57       	subi	r30, 0x77	; 119
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	93 81       	ldd	r25, Z+3	; 0x03
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e2       	ldi	r20, 0x20	; 32
    22da:	51 e4       	ldi	r21, 0x41	; 65
    22dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	8e 01       	movw	r16, r28
    22e6:	0d 57       	subi	r16, 0x7D	; 125
    22e8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ea:	bc 01       	movw	r22, r24
    22ec:	cd 01       	movw	r24, r26
    22ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	f8 01       	movw	r30, r16
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
    22fc:	1f c0       	rjmp	.+62     	; 0x233c <main+0x146>
    22fe:	fe 01       	movw	r30, r28
    2300:	ef 57       	subi	r30, 0x7F	; 127
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	89 e1       	ldi	r24, 0x19	; 25
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	91 83       	std	Z+1, r25	; 0x01
    230a:	80 83       	st	Z, r24
    230c:	fe 01       	movw	r30, r28
    230e:	ef 57       	subi	r30, 0x7F	; 127
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <main+0x120>
    231a:	fe 01       	movw	r30, r28
    231c:	ef 57       	subi	r30, 0x7F	; 127
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	91 83       	std	Z+1, r25	; 0x01
    2322:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	de 01       	movw	r26, r28
    2326:	ad 57       	subi	r26, 0x7D	; 125
    2328:	bf 4f       	sbci	r27, 0xFF	; 255
    232a:	fe 01       	movw	r30, r28
    232c:	ed 57       	subi	r30, 0x7D	; 125
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	80 81       	ld	r24, Z
    2332:	91 81       	ldd	r25, Z+1	; 0x01
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	11 96       	adiw	r26, 0x01	; 1
    2338:	9c 93       	st	X, r25
    233a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	fe 01       	movw	r30, r28
    233e:	ed 57       	subi	r30, 0x7D	; 125
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	80 81       	ld	r24, Z
    2344:	91 81       	ldd	r25, Z+1	; 0x01
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	d1 f6       	brne	.-76     	; 0x22fe <main+0x108>
    234a:	27 c0       	rjmp	.+78     	; 0x239a <main+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234c:	8e 01       	movw	r16, r28
    234e:	0d 57       	subi	r16, 0x7D	; 125
    2350:	1f 4f       	sbci	r17, 0xFF	; 255
    2352:	fe 01       	movw	r30, r28
    2354:	eb 57       	subi	r30, 0x7B	; 123
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	f8 01       	movw	r30, r16
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	80 83       	st	Z, r24
    236e:	de 01       	movw	r26, r28
    2370:	a1 58       	subi	r26, 0x81	; 129
    2372:	bf 4f       	sbci	r27, 0xFF	; 255
    2374:	fe 01       	movw	r30, r28
    2376:	ed 57       	subi	r30, 0x7D	; 125
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	8d 93       	st	X+, r24
    2380:	9c 93       	st	X, r25
    2382:	fe 01       	movw	r30, r28
    2384:	e1 58       	subi	r30, 0x81	; 129
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <main+0x196>
    2390:	fe 01       	movw	r30, r28
    2392:	e1 58       	subi	r30, 0x81	; 129
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	80 83       	st	Z, r24
/////////
    _delay_ms(2000);

    LCD_SetCursor(0,0);
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_SetCursor>
    LCD_String("Waiting Mode");
    23a2:	80 e6       	ldi	r24, 0x60	; 96
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	0e 94 c3 10 	call	0x2186	; 0x2186 <LCD_String>

    while (1) {

        if (UCSRA & (1<<RXC)) {
    23aa:	eb e2       	ldi	r30, 0x2B	; 43
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	88 23       	and	r24, r24
    23b2:	0c f0       	brlt	.+2      	; 0x23b6 <main+0x1c0>
    23b4:	65 c1       	rjmp	.+714    	; 0x2680 <main+0x48a>
            command = UDR;
    23b6:	ec e2       	ldi	r30, 0x2C	; 44
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	de 01       	movw	r26, r28
    23bc:	ac 56       	subi	r26, 0x6C	; 108
    23be:	bf 4f       	sbci	r27, 0xFF	; 255
    23c0:	80 81       	ld	r24, Z
    23c2:	8c 93       	st	X, r24

            if (command == 'A') {
    23c4:	fe 01       	movw	r30, r28
    23c6:	ec 56       	subi	r30, 0x6C	; 108
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	81 34       	cpi	r24, 0x41	; 65
    23ce:	81 f4       	brne	.+32     	; 0x23f0 <main+0x1fa>
                currentMode = MODE_AUTO;
    23d0:	fe 01       	movw	r30, r28
    23d2:	ed 56       	subi	r30, 0x6D	; 109
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	10 82       	st	Z, r1
                LCD_Command(0x01);
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
                LCD_SetCursor(0,0);
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	60 e0       	ldi	r22, 0x00	; 0
    23e2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_SetCursor>
                LCD_String("AUTO MODE");
    23e6:	8d e6       	ldi	r24, 0x6D	; 109
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 c3 10 	call	0x2186	; 0x2186 <LCD_String>
    23ee:	48 c1       	rjmp	.+656    	; 0x2680 <main+0x48a>
            }
            else if (command == 'M') {
    23f0:	fe 01       	movw	r30, r28
    23f2:	ec 56       	subi	r30, 0x6C	; 108
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 81       	ld	r24, Z
    23f8:	8d 34       	cpi	r24, 0x4D	; 77
    23fa:	89 f4       	brne	.+34     	; 0x241e <main+0x228>
                currentMode = MODE_MANUAL;
    23fc:	fe 01       	movw	r30, r28
    23fe:	ed 56       	subi	r30, 0x6D	; 109
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	80 83       	st	Z, r24
                LCD_Command(0x01);
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
                LCD_SetCursor(0,0);
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_SetCursor>
                LCD_String("MANUAL MODE");
    2414:	87 e7       	ldi	r24, 0x77	; 119
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0e 94 c3 10 	call	0x2186	; 0x2186 <LCD_String>
    241c:	31 c1       	rjmp	.+610    	; 0x2680 <main+0x48a>
            }
            else if (currentMode == MODE_MANUAL) {
    241e:	fe 01       	movw	r30, r28
    2420:	ed 56       	subi	r30, 0x6D	; 109
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 81       	ld	r24, Z
    2426:	81 30       	cpi	r24, 0x01	; 1
    2428:	09 f0       	breq	.+2      	; 0x242c <main+0x236>
    242a:	2a c1       	rjmp	.+596    	; 0x2680 <main+0x48a>

                switch(command) {
    242c:	fe 01       	movw	r30, r28
    242e:	ec 56       	subi	r30, 0x6C	; 108
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	28 2f       	mov	r18, r24
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	cb 55       	subi	r28, 0x5B	; 91
    243a:	df 4f       	sbci	r29, 0xFF	; 255
    243c:	39 83       	std	Y+1, r19	; 0x01
    243e:	28 83       	st	Y, r18
    2440:	c5 5a       	subi	r28, 0xA5	; 165
    2442:	d0 40       	sbci	r29, 0x00	; 0
    2444:	cb 55       	subi	r28, 0x5B	; 91
    2446:	df 4f       	sbci	r29, 0xFF	; 255
    2448:	88 81       	ld	r24, Y
    244a:	99 81       	ldd	r25, Y+1	; 0x01
    244c:	c5 5a       	subi	r28, 0xA5	; 165
    244e:	d0 40       	sbci	r29, 0x00	; 0
    2450:	86 34       	cpi	r24, 0x46	; 70
    2452:	91 05       	cpc	r25, r1
    2454:	31 f1       	breq	.+76     	; 0x24a2 <main+0x2ac>
    2456:	cb 55       	subi	r28, 0x5B	; 91
    2458:	df 4f       	sbci	r29, 0xFF	; 255
    245a:	e8 81       	ld	r30, Y
    245c:	f9 81       	ldd	r31, Y+1	; 0x01
    245e:	c5 5a       	subi	r28, 0xA5	; 165
    2460:	d0 40       	sbci	r29, 0x00	; 0
    2462:	e7 34       	cpi	r30, 0x47	; 71
    2464:	f1 05       	cpc	r31, r1
    2466:	54 f4       	brge	.+20     	; 0x247c <main+0x286>
    2468:	cb 55       	subi	r28, 0x5B	; 91
    246a:	df 4f       	sbci	r29, 0xFF	; 255
    246c:	28 81       	ld	r18, Y
    246e:	39 81       	ldd	r19, Y+1	; 0x01
    2470:	c5 5a       	subi	r28, 0xA5	; 165
    2472:	d0 40       	sbci	r29, 0x00	; 0
    2474:	22 34       	cpi	r18, 0x42	; 66
    2476:	31 05       	cpc	r19, r1
    2478:	11 f1       	breq	.+68     	; 0x24be <main+0x2c8>
    247a:	4b c0       	rjmp	.+150    	; 0x2512 <main+0x31c>
    247c:	cb 55       	subi	r28, 0x5B	; 91
    247e:	df 4f       	sbci	r29, 0xFF	; 255
    2480:	88 81       	ld	r24, Y
    2482:	99 81       	ldd	r25, Y+1	; 0x01
    2484:	c5 5a       	subi	r28, 0xA5	; 165
    2486:	d0 40       	sbci	r29, 0x00	; 0
    2488:	8c 34       	cpi	r24, 0x4C	; 76
    248a:	91 05       	cpc	r25, r1
    248c:	31 f1       	breq	.+76     	; 0x24da <main+0x2e4>
    248e:	cb 55       	subi	r28, 0x5B	; 91
    2490:	df 4f       	sbci	r29, 0xFF	; 255
    2492:	e8 81       	ld	r30, Y
    2494:	f9 81       	ldd	r31, Y+1	; 0x01
    2496:	c5 5a       	subi	r28, 0xA5	; 165
    2498:	d0 40       	sbci	r29, 0x00	; 0
    249a:	e2 35       	cpi	r30, 0x52	; 82
    249c:	f1 05       	cpc	r31, r1
    249e:	59 f1       	breq	.+86     	; 0x24f6 <main+0x300>
    24a0:	38 c0       	rjmp	.+112    	; 0x2512 <main+0x31c>
                    case 'F': Motors_Forward();
    24a2:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <Motors_Forward>
                    LCD_Command(0x01);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
                    LCD_SetCursor(0,0);
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_SetCursor>
                    LCD_String("FORWARD");
    24b4:	83 e8       	ldi	r24, 0x83	; 131
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	0e 94 c3 10 	call	0x2186	; 0x2186 <LCD_String>
    24bc:	2c c0       	rjmp	.+88     	; 0x2516 <main+0x320>
                    break;
                    case 'B': Motors_Backward();
    24be:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Motors_Backward>
                    LCD_Command(0x01);
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
                    LCD_SetCursor(0,0);
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_SetCursor>
                    LCD_String("BACKWARD");
    24d0:	8b e8       	ldi	r24, 0x8B	; 139
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 94 c3 10 	call	0x2186	; 0x2186 <LCD_String>
    24d8:	1e c0       	rjmp	.+60     	; 0x2516 <main+0x320>
                    break;
                    case 'L': Motors_Left();
    24da:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <Motors_Left>
                    LCD_Command(0x01);
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
                    LCD_SetCursor(0,0);
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_SetCursor>
                    LCD_String("LEFT");
    24ec:	84 e9       	ldi	r24, 0x94	; 148
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 c3 10 	call	0x2186	; 0x2186 <LCD_String>
    24f4:	10 c0       	rjmp	.+32     	; 0x2516 <main+0x320>
                    break;
                    case 'R': Motors_Right();
    24f6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <Motors_Right>
                    LCD_Command(0x01);
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_Command>
                    LCD_SetCursor(0,0);
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_SetCursor>
                    LCD_String("RIGHT");
    2508:	89 e9       	ldi	r24, 0x99	; 153
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	0e 94 c3 10 	call	0x2186	; 0x2186 <LCD_String>
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <main+0x320>
                    break;
                    default:  Motors_Stop();    break;
    2512:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Motors_Stop>
    2516:	fe 01       	movw	r30, r28
    2518:	e5 58       	subi	r30, 0x85	; 133
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a8 e4       	ldi	r26, 0x48	; 72
    2522:	b3 e4       	ldi	r27, 0x43	; 67
    2524:	80 83       	st	Z, r24
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	a2 83       	std	Z+2, r26	; 0x02
    252a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252c:	8e 01       	movw	r16, r28
    252e:	09 58       	subi	r16, 0x89	; 137
    2530:	1f 4f       	sbci	r17, 0xFF	; 255
    2532:	fe 01       	movw	r30, r28
    2534:	e5 58       	subi	r30, 0x85	; 133
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a e7       	ldi	r20, 0x7A	; 122
    2546:	53 e4       	ldi	r21, 0x43	; 67
    2548:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	f8 01       	movw	r30, r16
    2552:	80 83       	st	Z, r24
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	a2 83       	std	Z+2, r26	; 0x02
    2558:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    255a:	fe 01       	movw	r30, r28
    255c:	e9 58       	subi	r30, 0x89	; 137
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	60 81       	ld	r22, Z
    2562:	71 81       	ldd	r23, Z+1	; 0x01
    2564:	82 81       	ldd	r24, Z+2	; 0x02
    2566:	93 81       	ldd	r25, Z+3	; 0x03
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e8       	ldi	r20, 0x80	; 128
    256e:	5f e3       	ldi	r21, 0x3F	; 63
    2570:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2574:	88 23       	and	r24, r24
    2576:	44 f4       	brge	.+16     	; 0x2588 <main+0x392>
		__ticks = 1;
    2578:	fe 01       	movw	r30, r28
    257a:	eb 58       	subi	r30, 0x8B	; 139
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
    2586:	64 c0       	rjmp	.+200    	; 0x2650 <main+0x45a>
	else if (__tmp > 65535)
    2588:	fe 01       	movw	r30, r28
    258a:	e9 58       	subi	r30, 0x89	; 137
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	60 81       	ld	r22, Z
    2590:	71 81       	ldd	r23, Z+1	; 0x01
    2592:	82 81       	ldd	r24, Z+2	; 0x02
    2594:	93 81       	ldd	r25, Z+3	; 0x03
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	3f ef       	ldi	r19, 0xFF	; 255
    259a:	4f e7       	ldi	r20, 0x7F	; 127
    259c:	57 e4       	ldi	r21, 0x47	; 71
    259e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25a2:	18 16       	cp	r1, r24
    25a4:	0c f0       	brlt	.+2      	; 0x25a8 <main+0x3b2>
    25a6:	43 c0       	rjmp	.+134    	; 0x262e <main+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a8:	fe 01       	movw	r30, r28
    25aa:	e5 58       	subi	r30, 0x85	; 133
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	60 81       	ld	r22, Z
    25b0:	71 81       	ldd	r23, Z+1	; 0x01
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e2       	ldi	r20, 0x20	; 32
    25bc:	51 e4       	ldi	r21, 0x41	; 65
    25be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8e 01       	movw	r16, r28
    25c8:	0b 58       	subi	r16, 0x8B	; 139
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	f8 01       	movw	r30, r16
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	80 83       	st	Z, r24
    25de:	1f c0       	rjmp	.+62     	; 0x261e <main+0x428>
    25e0:	fe 01       	movw	r30, r28
    25e2:	ed 58       	subi	r30, 0x8D	; 141
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	89 e1       	ldi	r24, 0x19	; 25
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
    25ee:	fe 01       	movw	r30, r28
    25f0:	ed 58       	subi	r30, 0x8D	; 141
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <main+0x402>
    25fc:	fe 01       	movw	r30, r28
    25fe:	ed 58       	subi	r30, 0x8D	; 141
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2606:	de 01       	movw	r26, r28
    2608:	ab 58       	subi	r26, 0x8B	; 139
    260a:	bf 4f       	sbci	r27, 0xFF	; 255
    260c:	fe 01       	movw	r30, r28
    260e:	eb 58       	subi	r30, 0x8B	; 139
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	80 81       	ld	r24, Z
    2614:	91 81       	ldd	r25, Z+1	; 0x01
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	11 96       	adiw	r26, 0x01	; 1
    261a:	9c 93       	st	X, r25
    261c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261e:	fe 01       	movw	r30, r28
    2620:	eb 58       	subi	r30, 0x8B	; 139
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	00 97       	sbiw	r24, 0x00	; 0
    262a:	d1 f6       	brne	.-76     	; 0x25e0 <main+0x3ea>
    262c:	27 c0       	rjmp	.+78     	; 0x267c <main+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262e:	8e 01       	movw	r16, r28
    2630:	0b 58       	subi	r16, 0x8B	; 139
    2632:	1f 4f       	sbci	r17, 0xFF	; 255
    2634:	fe 01       	movw	r30, r28
    2636:	e9 58       	subi	r30, 0x89	; 137
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	60 81       	ld	r22, Z
    263c:	71 81       	ldd	r23, Z+1	; 0x01
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	f8 01       	movw	r30, r16
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	80 83       	st	Z, r24
    2650:	de 01       	movw	r26, r28
    2652:	af 58       	subi	r26, 0x8F	; 143
    2654:	bf 4f       	sbci	r27, 0xFF	; 255
    2656:	fe 01       	movw	r30, r28
    2658:	eb 58       	subi	r30, 0x8B	; 139
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	80 81       	ld	r24, Z
    265e:	91 81       	ldd	r25, Z+1	; 0x01
    2660:	8d 93       	st	X+, r24
    2662:	9c 93       	st	X, r25
    2664:	fe 01       	movw	r30, r28
    2666:	ef 58       	subi	r30, 0x8F	; 143
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	91 81       	ldd	r25, Z+1	; 0x01
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <main+0x478>
    2672:	fe 01       	movw	r30, r28
    2674:	ef 58       	subi	r30, 0x8F	; 143
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	91 83       	std	Z+1, r25	; 0x01
    267a:	80 83       	st	Z, r24
                }
                _delay_ms(200);
                Motors_Stop();
    267c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Motors_Stop>
            }
        }


        if (currentMode == MODE_AUTO) {
    2680:	fe 01       	movw	r30, r28
    2682:	ed 56       	subi	r30, 0x6D	; 109
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	88 23       	and	r24, r24
    268a:	09 f0       	breq	.+2      	; 0x268e <main+0x498>
    268c:	8e ce       	rjmp	.-740    	; 0x23aa <main+0x1b4>
            uint16_t distance = Ultrasonic_ReadDistance();
    268e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <Ultrasonic_ReadDistance>
    2692:	fe 01       	movw	r30, r28
    2694:	ef 56       	subi	r30, 0x6F	; 111
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	91 83       	std	Z+1, r25	; 0x01
    269a:	80 83       	st	Z, r24

            LCD_SetCursor(1,0);
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_SetCursor>
            sprintf(buffer, "Dist:%3d cm", distance);
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <main+0x4b0>
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <main+0x4b2>
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <main+0x4b4>
    26aa:	ad b7       	in	r26, 0x3d	; 61
    26ac:	be b7       	in	r27, 0x3e	; 62
    26ae:	11 96       	adiw	r26, 0x01	; 1
    26b0:	ce 01       	movw	r24, r28
    26b2:	8b 56       	subi	r24, 0x6B	; 107
    26b4:	9f 4f       	sbci	r25, 0xFF	; 255
    26b6:	11 96       	adiw	r26, 0x01	; 1
    26b8:	9c 93       	st	X, r25
    26ba:	8e 93       	st	-X, r24
    26bc:	8f e9       	ldi	r24, 0x9F	; 159
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	13 96       	adiw	r26, 0x03	; 3
    26c2:	9c 93       	st	X, r25
    26c4:	8e 93       	st	-X, r24
    26c6:	12 97       	sbiw	r26, 0x02	; 2
    26c8:	fe 01       	movw	r30, r28
    26ca:	ef 56       	subi	r30, 0x6F	; 111
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	80 81       	ld	r24, Z
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	15 96       	adiw	r26, 0x05	; 5
    26d4:	9c 93       	st	X, r25
    26d6:	8e 93       	st	-X, r24
    26d8:	14 97       	sbiw	r26, 0x04	; 4
    26da:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
    26de:	2d b7       	in	r18, 0x3d	; 61
    26e0:	3e b7       	in	r19, 0x3e	; 62
    26e2:	2a 5f       	subi	r18, 0xFA	; 250
    26e4:	3f 4f       	sbci	r19, 0xFF	; 255
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	3e bf       	out	0x3e, r19	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	2d bf       	out	0x3d, r18	; 61
            LCD_String(buffer);
    26f0:	ce 01       	movw	r24, r28
    26f2:	8b 56       	subi	r24, 0x6B	; 107
    26f4:	9f 4f       	sbci	r25, 0xFF	; 255
    26f6:	0e 94 c3 10 	call	0x2186	; 0x2186 <LCD_String>

            if (distance > THRESHOLD) {
    26fa:	fe 01       	movw	r30, r28
    26fc:	ef 56       	subi	r30, 0x6F	; 111
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	91 81       	ldd	r25, Z+1	; 0x01
    2704:	80 31       	cpi	r24, 0x10	; 16
    2706:	91 05       	cpc	r25, r1
    2708:	18 f0       	brcs	.+6      	; 0x2710 <main+0x51a>
                Motors_Forward();
    270a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <Motors_Forward>
    270e:	47 c4       	rjmp	.+2190   	; 0x2f9e <main+0xda8>
            } else {
                Motors_Stop();
    2710:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Motors_Stop>
    2714:	fe 01       	movw	r30, r28
    2716:	e3 59       	subi	r30, 0x93	; 147
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	a6 e9       	ldi	r26, 0x96	; 150
    2720:	b3 e4       	ldi	r27, 0x43	; 67
    2722:	80 83       	st	Z, r24
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	a2 83       	std	Z+2, r26	; 0x02
    2728:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272a:	8e 01       	movw	r16, r28
    272c:	07 59       	subi	r16, 0x97	; 151
    272e:	1f 4f       	sbci	r17, 0xFF	; 255
    2730:	fe 01       	movw	r30, r28
    2732:	e3 59       	subi	r30, 0x93	; 147
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	60 81       	ld	r22, Z
    2738:	71 81       	ldd	r23, Z+1	; 0x01
    273a:	82 81       	ldd	r24, Z+2	; 0x02
    273c:	93 81       	ldd	r25, Z+3	; 0x03
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4a e7       	ldi	r20, 0x7A	; 122
    2744:	53 e4       	ldi	r21, 0x43	; 67
    2746:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	f8 01       	movw	r30, r16
    2750:	80 83       	st	Z, r24
    2752:	91 83       	std	Z+1, r25	; 0x01
    2754:	a2 83       	std	Z+2, r26	; 0x02
    2756:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2758:	fe 01       	movw	r30, r28
    275a:	e7 59       	subi	r30, 0x97	; 151
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	60 81       	ld	r22, Z
    2760:	71 81       	ldd	r23, Z+1	; 0x01
    2762:	82 81       	ldd	r24, Z+2	; 0x02
    2764:	93 81       	ldd	r25, Z+3	; 0x03
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e8       	ldi	r20, 0x80	; 128
    276c:	5f e3       	ldi	r21, 0x3F	; 63
    276e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2772:	88 23       	and	r24, r24
    2774:	44 f4       	brge	.+16     	; 0x2786 <main+0x590>
		__ticks = 1;
    2776:	fe 01       	movw	r30, r28
    2778:	e9 59       	subi	r30, 0x99	; 153
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	91 83       	std	Z+1, r25	; 0x01
    2782:	80 83       	st	Z, r24
    2784:	64 c0       	rjmp	.+200    	; 0x284e <main+0x658>
	else if (__tmp > 65535)
    2786:	fe 01       	movw	r30, r28
    2788:	e7 59       	subi	r30, 0x97	; 151
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	60 81       	ld	r22, Z
    278e:	71 81       	ldd	r23, Z+1	; 0x01
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	93 81       	ldd	r25, Z+3	; 0x03
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27a0:	18 16       	cp	r1, r24
    27a2:	0c f0       	brlt	.+2      	; 0x27a6 <main+0x5b0>
    27a4:	43 c0       	rjmp	.+134    	; 0x282c <main+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a6:	fe 01       	movw	r30, r28
    27a8:	e3 59       	subi	r30, 0x93	; 147
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	60 81       	ld	r22, Z
    27ae:	71 81       	ldd	r23, Z+1	; 0x01
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e2       	ldi	r20, 0x20	; 32
    27ba:	51 e4       	ldi	r21, 0x41	; 65
    27bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	8e 01       	movw	r16, r28
    27c6:	09 59       	subi	r16, 0x99	; 153
    27c8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	f8 01       	movw	r30, r16
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	80 83       	st	Z, r24
    27dc:	1f c0       	rjmp	.+62     	; 0x281c <main+0x626>
    27de:	fe 01       	movw	r30, r28
    27e0:	eb 59       	subi	r30, 0x9B	; 155
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	89 e1       	ldi	r24, 0x19	; 25
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
    27ec:	fe 01       	movw	r30, r28
    27ee:	eb 59       	subi	r30, 0x9B	; 155
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 81       	ld	r24, Z
    27f4:	91 81       	ldd	r25, Z+1	; 0x01
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <main+0x600>
    27fa:	fe 01       	movw	r30, r28
    27fc:	eb 59       	subi	r30, 0x9B	; 155
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2804:	de 01       	movw	r26, r28
    2806:	a9 59       	subi	r26, 0x99	; 153
    2808:	bf 4f       	sbci	r27, 0xFF	; 255
    280a:	fe 01       	movw	r30, r28
    280c:	e9 59       	subi	r30, 0x99	; 153
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 81       	ld	r24, Z
    2812:	91 81       	ldd	r25, Z+1	; 0x01
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	11 96       	adiw	r26, 0x01	; 1
    2818:	9c 93       	st	X, r25
    281a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281c:	fe 01       	movw	r30, r28
    281e:	e9 59       	subi	r30, 0x99	; 153
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	80 81       	ld	r24, Z
    2824:	91 81       	ldd	r25, Z+1	; 0x01
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	d1 f6       	brne	.-76     	; 0x27de <main+0x5e8>
    282a:	27 c0       	rjmp	.+78     	; 0x287a <main+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282c:	8e 01       	movw	r16, r28
    282e:	09 59       	subi	r16, 0x99	; 153
    2830:	1f 4f       	sbci	r17, 0xFF	; 255
    2832:	fe 01       	movw	r30, r28
    2834:	e7 59       	subi	r30, 0x97	; 151
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	f8 01       	movw	r30, r16
    284a:	91 83       	std	Z+1, r25	; 0x01
    284c:	80 83       	st	Z, r24
    284e:	de 01       	movw	r26, r28
    2850:	ad 59       	subi	r26, 0x9D	; 157
    2852:	bf 4f       	sbci	r27, 0xFF	; 255
    2854:	fe 01       	movw	r30, r28
    2856:	e9 59       	subi	r30, 0x99	; 153
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	8d 93       	st	X+, r24
    2860:	9c 93       	st	X, r25
    2862:	fe 01       	movw	r30, r28
    2864:	ed 59       	subi	r30, 0x9D	; 157
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 81       	ld	r24, Z
    286a:	91 81       	ldd	r25, Z+1	; 0x01
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <main+0x676>
    2870:	fe 01       	movw	r30, r28
    2872:	ed 59       	subi	r30, 0x9D	; 157
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	80 83       	st	Z, r24
                _delay_ms(300);

                Servo_SetAngle(90);
    287a:	8a e5       	ldi	r24, 0x5A	; 90
    287c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <Servo_SetAngle>
    2880:	fe 01       	movw	r30, r28
    2882:	e1 5a       	subi	r30, 0xA1	; 161
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	aa ef       	ldi	r26, 0xFA	; 250
    288c:	b3 e4       	ldi	r27, 0x43	; 67
    288e:	80 83       	st	Z, r24
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	a2 83       	std	Z+2, r26	; 0x02
    2894:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2896:	8e 01       	movw	r16, r28
    2898:	05 5a       	subi	r16, 0xA5	; 165
    289a:	1f 4f       	sbci	r17, 0xFF	; 255
    289c:	fe 01       	movw	r30, r28
    289e:	e1 5a       	subi	r30, 0xA1	; 161
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	60 81       	ld	r22, Z
    28a4:	71 81       	ldd	r23, Z+1	; 0x01
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	4a e7       	ldi	r20, 0x7A	; 122
    28b0:	53 e4       	ldi	r21, 0x43	; 67
    28b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	f8 01       	movw	r30, r16
    28bc:	80 83       	st	Z, r24
    28be:	91 83       	std	Z+1, r25	; 0x01
    28c0:	a2 83       	std	Z+2, r26	; 0x02
    28c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28c4:	fe 01       	movw	r30, r28
    28c6:	e5 5a       	subi	r30, 0xA5	; 165
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e8       	ldi	r20, 0x80	; 128
    28d8:	5f e3       	ldi	r21, 0x3F	; 63
    28da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28de:	88 23       	and	r24, r24
    28e0:	44 f4       	brge	.+16     	; 0x28f2 <main+0x6fc>
		__ticks = 1;
    28e2:	fe 01       	movw	r30, r28
    28e4:	e7 5a       	subi	r30, 0xA7	; 167
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	80 83       	st	Z, r24
    28f0:	64 c0       	rjmp	.+200    	; 0x29ba <main+0x7c4>
	else if (__tmp > 65535)
    28f2:	fe 01       	movw	r30, r28
    28f4:	e5 5a       	subi	r30, 0xA5	; 165
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	82 81       	ldd	r24, Z+2	; 0x02
    28fe:	93 81       	ldd	r25, Z+3	; 0x03
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	3f ef       	ldi	r19, 0xFF	; 255
    2904:	4f e7       	ldi	r20, 0x7F	; 127
    2906:	57 e4       	ldi	r21, 0x47	; 71
    2908:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    290c:	18 16       	cp	r1, r24
    290e:	0c f0       	brlt	.+2      	; 0x2912 <main+0x71c>
    2910:	43 c0       	rjmp	.+134    	; 0x2998 <main+0x7a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2912:	fe 01       	movw	r30, r28
    2914:	e1 5a       	subi	r30, 0xA1	; 161
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e2       	ldi	r20, 0x20	; 32
    2926:	51 e4       	ldi	r21, 0x41	; 65
    2928:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	8e 01       	movw	r16, r28
    2932:	07 5a       	subi	r16, 0xA7	; 167
    2934:	1f 4f       	sbci	r17, 0xFF	; 255
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	f8 01       	movw	r30, r16
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	80 83       	st	Z, r24
    2948:	1f c0       	rjmp	.+62     	; 0x2988 <main+0x792>
    294a:	fe 01       	movw	r30, r28
    294c:	e9 5a       	subi	r30, 0xA9	; 169
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	89 e1       	ldi	r24, 0x19	; 25
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	80 83       	st	Z, r24
    2958:	fe 01       	movw	r30, r28
    295a:	e9 5a       	subi	r30, 0xA9	; 169
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	80 81       	ld	r24, Z
    2960:	91 81       	ldd	r25, Z+1	; 0x01
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <main+0x76c>
    2966:	fe 01       	movw	r30, r28
    2968:	e9 5a       	subi	r30, 0xA9	; 169
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2970:	de 01       	movw	r26, r28
    2972:	a7 5a       	subi	r26, 0xA7	; 167
    2974:	bf 4f       	sbci	r27, 0xFF	; 255
    2976:	fe 01       	movw	r30, r28
    2978:	e7 5a       	subi	r30, 0xA7	; 167
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	11 96       	adiw	r26, 0x01	; 1
    2984:	9c 93       	st	X, r25
    2986:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2988:	fe 01       	movw	r30, r28
    298a:	e7 5a       	subi	r30, 0xA7	; 167
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	d1 f6       	brne	.-76     	; 0x294a <main+0x754>
    2996:	27 c0       	rjmp	.+78     	; 0x29e6 <main+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2998:	8e 01       	movw	r16, r28
    299a:	07 5a       	subi	r16, 0xA7	; 167
    299c:	1f 4f       	sbci	r17, 0xFF	; 255
    299e:	fe 01       	movw	r30, r28
    29a0:	e5 5a       	subi	r30, 0xA5	; 165
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	60 81       	ld	r22, Z
    29a6:	71 81       	ldd	r23, Z+1	; 0x01
    29a8:	82 81       	ldd	r24, Z+2	; 0x02
    29aa:	93 81       	ldd	r25, Z+3	; 0x03
    29ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	f8 01       	movw	r30, r16
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
    29ba:	de 01       	movw	r26, r28
    29bc:	ab 5a       	subi	r26, 0xAB	; 171
    29be:	bf 4f       	sbci	r27, 0xFF	; 255
    29c0:	fe 01       	movw	r30, r28
    29c2:	e7 5a       	subi	r30, 0xA7	; 167
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	8d 93       	st	X+, r24
    29cc:	9c 93       	st	X, r25
    29ce:	fe 01       	movw	r30, r28
    29d0:	eb 5a       	subi	r30, 0xAB	; 171
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <main+0x7e2>
    29dc:	fe 01       	movw	r30, r28
    29de:	eb 5a       	subi	r30, 0xAB	; 171
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	80 83       	st	Z, r24
                _delay_ms(500);
                uint16_t rightDist = Ultrasonic_ReadDistance();
    29e6:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <Ultrasonic_ReadDistance>
    29ea:	fe 01       	movw	r30, r28
    29ec:	e1 57       	subi	r30, 0x71	; 113
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	80 83       	st	Z, r24

                Servo_SetAngle(-90);
    29f4:	86 ea       	ldi	r24, 0xA6	; 166
    29f6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <Servo_SetAngle>
    29fa:	fe 01       	movw	r30, r28
    29fc:	ef 5a       	subi	r30, 0xAF	; 175
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	aa ef       	ldi	r26, 0xFA	; 250
    2a06:	b3 e4       	ldi	r27, 0x43	; 67
    2a08:	80 83       	st	Z, r24
    2a0a:	91 83       	std	Z+1, r25	; 0x01
    2a0c:	a2 83       	std	Z+2, r26	; 0x02
    2a0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a10:	8e 01       	movw	r16, r28
    2a12:	03 5b       	subi	r16, 0xB3	; 179
    2a14:	1f 4f       	sbci	r17, 0xFF	; 255
    2a16:	fe 01       	movw	r30, r28
    2a18:	ef 5a       	subi	r30, 0xAF	; 175
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	60 81       	ld	r22, Z
    2a1e:	71 81       	ldd	r23, Z+1	; 0x01
    2a20:	82 81       	ldd	r24, Z+2	; 0x02
    2a22:	93 81       	ldd	r25, Z+3	; 0x03
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	4a e7       	ldi	r20, 0x7A	; 122
    2a2a:	53 e4       	ldi	r21, 0x43	; 67
    2a2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	f8 01       	movw	r30, r16
    2a36:	80 83       	st	Z, r24
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	a2 83       	std	Z+2, r26	; 0x02
    2a3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a3e:	fe 01       	movw	r30, r28
    2a40:	e3 5b       	subi	r30, 0xB3	; 179
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	60 81       	ld	r22, Z
    2a46:	71 81       	ldd	r23, Z+1	; 0x01
    2a48:	82 81       	ldd	r24, Z+2	; 0x02
    2a4a:	93 81       	ldd	r25, Z+3	; 0x03
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e8       	ldi	r20, 0x80	; 128
    2a52:	5f e3       	ldi	r21, 0x3F	; 63
    2a54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a58:	88 23       	and	r24, r24
    2a5a:	44 f4       	brge	.+16     	; 0x2a6c <main+0x876>
		__ticks = 1;
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e5 5b       	subi	r30, 0xB5	; 181
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	80 83       	st	Z, r24
    2a6a:	64 c0       	rjmp	.+200    	; 0x2b34 <main+0x93e>
	else if (__tmp > 65535)
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e3 5b       	subi	r30, 0xB3	; 179
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	60 81       	ld	r22, Z
    2a74:	71 81       	ldd	r23, Z+1	; 0x01
    2a76:	82 81       	ldd	r24, Z+2	; 0x02
    2a78:	93 81       	ldd	r25, Z+3	; 0x03
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	3f ef       	ldi	r19, 0xFF	; 255
    2a7e:	4f e7       	ldi	r20, 0x7F	; 127
    2a80:	57 e4       	ldi	r21, 0x47	; 71
    2a82:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a86:	18 16       	cp	r1, r24
    2a88:	0c f0       	brlt	.+2      	; 0x2a8c <main+0x896>
    2a8a:	43 c0       	rjmp	.+134    	; 0x2b12 <main+0x91c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	ef 5a       	subi	r30, 0xAF	; 175
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	60 81       	ld	r22, Z
    2a94:	71 81       	ldd	r23, Z+1	; 0x01
    2a96:	82 81       	ldd	r24, Z+2	; 0x02
    2a98:	93 81       	ldd	r25, Z+3	; 0x03
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e2       	ldi	r20, 0x20	; 32
    2aa0:	51 e4       	ldi	r21, 0x41	; 65
    2aa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	8e 01       	movw	r16, r28
    2aac:	05 5b       	subi	r16, 0xB5	; 181
    2aae:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab0:	bc 01       	movw	r22, r24
    2ab2:	cd 01       	movw	r24, r26
    2ab4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	f8 01       	movw	r30, r16
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	80 83       	st	Z, r24
    2ac2:	1f c0       	rjmp	.+62     	; 0x2b02 <main+0x90c>
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	e7 5b       	subi	r30, 0xB7	; 183
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	89 e1       	ldi	r24, 0x19	; 25
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e7 5b       	subi	r30, 0xB7	; 183
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 81       	ld	r24, Z
    2ada:	91 81       	ldd	r25, Z+1	; 0x01
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <main+0x8e6>
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	e7 5b       	subi	r30, 0xB7	; 183
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	91 83       	std	Z+1, r25	; 0x01
    2ae8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aea:	de 01       	movw	r26, r28
    2aec:	a5 5b       	subi	r26, 0xB5	; 181
    2aee:	bf 4f       	sbci	r27, 0xFF	; 255
    2af0:	fe 01       	movw	r30, r28
    2af2:	e5 5b       	subi	r30, 0xB5	; 181
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	80 81       	ld	r24, Z
    2af8:	91 81       	ldd	r25, Z+1	; 0x01
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	11 96       	adiw	r26, 0x01	; 1
    2afe:	9c 93       	st	X, r25
    2b00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b02:	fe 01       	movw	r30, r28
    2b04:	e5 5b       	subi	r30, 0xB5	; 181
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	80 81       	ld	r24, Z
    2b0a:	91 81       	ldd	r25, Z+1	; 0x01
    2b0c:	00 97       	sbiw	r24, 0x00	; 0
    2b0e:	d1 f6       	brne	.-76     	; 0x2ac4 <main+0x8ce>
    2b10:	27 c0       	rjmp	.+78     	; 0x2b60 <main+0x96a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b12:	8e 01       	movw	r16, r28
    2b14:	05 5b       	subi	r16, 0xB5	; 181
    2b16:	1f 4f       	sbci	r17, 0xFF	; 255
    2b18:	fe 01       	movw	r30, r28
    2b1a:	e3 5b       	subi	r30, 0xB3	; 179
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	60 81       	ld	r22, Z
    2b20:	71 81       	ldd	r23, Z+1	; 0x01
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	93 81       	ldd	r25, Z+3	; 0x03
    2b26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	f8 01       	movw	r30, r16
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	80 83       	st	Z, r24
    2b34:	de 01       	movw	r26, r28
    2b36:	a9 5b       	subi	r26, 0xB9	; 185
    2b38:	bf 4f       	sbci	r27, 0xFF	; 255
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e5 5b       	subi	r30, 0xB5	; 181
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	80 81       	ld	r24, Z
    2b42:	91 81       	ldd	r25, Z+1	; 0x01
    2b44:	8d 93       	st	X+, r24
    2b46:	9c 93       	st	X, r25
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e9 5b       	subi	r30, 0xB9	; 185
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	80 81       	ld	r24, Z
    2b50:	91 81       	ldd	r25, Z+1	; 0x01
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	f1 f7       	brne	.-4      	; 0x2b52 <main+0x95c>
    2b56:	fe 01       	movw	r30, r28
    2b58:	e9 5b       	subi	r30, 0xB9	; 185
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	91 83       	std	Z+1, r25	; 0x01
    2b5e:	80 83       	st	Z, r24
                _delay_ms(500);
                uint16_t leftDist = Ultrasonic_ReadDistance();
    2b60:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <Ultrasonic_ReadDistance>
    2b64:	fe 01       	movw	r30, r28
    2b66:	e3 57       	subi	r30, 0x73	; 115
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24

                Servo_SetAngle(0);
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <Servo_SetAngle>
    2b74:	fe 01       	movw	r30, r28
    2b76:	ed 5b       	subi	r30, 0xBD	; 189
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a6 e9       	ldi	r26, 0x96	; 150
    2b80:	b3 e4       	ldi	r27, 0x43	; 67
    2b82:	80 83       	st	Z, r24
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	a2 83       	std	Z+2, r26	; 0x02
    2b88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	8e 01       	movw	r16, r28
    2b8c:	01 5c       	subi	r16, 0xC1	; 193
    2b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b90:	fe 01       	movw	r30, r28
    2b92:	ed 5b       	subi	r30, 0xBD	; 189
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	60 81       	ld	r22, Z
    2b98:	71 81       	ldd	r23, Z+1	; 0x01
    2b9a:	82 81       	ldd	r24, Z+2	; 0x02
    2b9c:	93 81       	ldd	r25, Z+3	; 0x03
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	4a e7       	ldi	r20, 0x7A	; 122
    2ba4:	53 e4       	ldi	r21, 0x43	; 67
    2ba6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	f8 01       	movw	r30, r16
    2bb0:	80 83       	st	Z, r24
    2bb2:	91 83       	std	Z+1, r25	; 0x01
    2bb4:	a2 83       	std	Z+2, r26	; 0x02
    2bb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bb8:	fe 01       	movw	r30, r28
    2bba:	ff 96       	adiw	r30, 0x3f	; 63
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e8       	ldi	r20, 0x80	; 128
    2bca:	5f e3       	ldi	r21, 0x3F	; 63
    2bcc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bd0:	88 23       	and	r24, r24
    2bd2:	2c f4       	brge	.+10     	; 0x2bde <main+0x9e8>
		__ticks = 1;
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	9e af       	std	Y+62, r25	; 0x3e
    2bda:	8d af       	std	Y+61, r24	; 0x3d
    2bdc:	46 c0       	rjmp	.+140    	; 0x2c6a <main+0xa74>
	else if (__tmp > 65535)
    2bde:	fe 01       	movw	r30, r28
    2be0:	ff 96       	adiw	r30, 0x3f	; 63
    2be2:	60 81       	ld	r22, Z
    2be4:	71 81       	ldd	r23, Z+1	; 0x01
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	93 81       	ldd	r25, Z+3	; 0x03
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	3f ef       	ldi	r19, 0xFF	; 255
    2bee:	4f e7       	ldi	r20, 0x7F	; 127
    2bf0:	57 e4       	ldi	r21, 0x47	; 71
    2bf2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bf6:	18 16       	cp	r1, r24
    2bf8:	64 f5       	brge	.+88     	; 0x2c52 <main+0xa5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	ed 5b       	subi	r30, 0xBD	; 189
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	60 81       	ld	r22, Z
    2c02:	71 81       	ldd	r23, Z+1	; 0x01
    2c04:	82 81       	ldd	r24, Z+2	; 0x02
    2c06:	93 81       	ldd	r25, Z+3	; 0x03
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e2       	ldi	r20, 0x20	; 32
    2c0e:	51 e4       	ldi	r21, 0x41	; 65
    2c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	bc 01       	movw	r22, r24
    2c1a:	cd 01       	movw	r24, r26
    2c1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	9e af       	std	Y+62, r25	; 0x3e
    2c26:	8d af       	std	Y+61, r24	; 0x3d
    2c28:	0f c0       	rjmp	.+30     	; 0x2c48 <main+0xa52>
    2c2a:	89 e1       	ldi	r24, 0x19	; 25
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	9c af       	std	Y+60, r25	; 0x3c
    2c30:	8b af       	std	Y+59, r24	; 0x3b
    2c32:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c34:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <main+0xa40>
    2c3a:	9c af       	std	Y+60, r25	; 0x3c
    2c3c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c40:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	9e af       	std	Y+62, r25	; 0x3e
    2c46:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c48:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	69 f7       	brne	.-38     	; 0x2c2a <main+0xa34>
    2c50:	16 c0       	rjmp	.+44     	; 0x2c7e <main+0xa88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c52:	fe 01       	movw	r30, r28
    2c54:	ff 96       	adiw	r30, 0x3f	; 63
    2c56:	60 81       	ld	r22, Z
    2c58:	71 81       	ldd	r23, Z+1	; 0x01
    2c5a:	82 81       	ldd	r24, Z+2	; 0x02
    2c5c:	93 81       	ldd	r25, Z+3	; 0x03
    2c5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	9e af       	std	Y+62, r25	; 0x3e
    2c68:	8d af       	std	Y+61, r24	; 0x3d
    2c6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c6e:	9a af       	std	Y+58, r25	; 0x3a
    2c70:	89 af       	std	Y+57, r24	; 0x39
    2c72:	89 ad       	ldd	r24, Y+57	; 0x39
    2c74:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <main+0xa80>
    2c7a:	9a af       	std	Y+58, r25	; 0x3a
    2c7c:	89 af       	std	Y+57, r24	; 0x39
                _delay_ms(300);

                if (rightDist > leftDist && rightDist > THRESHOLD) {
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e1 57       	subi	r30, 0x71	; 113
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	de 01       	movw	r26, r28
    2c86:	a3 57       	subi	r26, 0x73	; 115
    2c88:	bf 4f       	sbci	r27, 0xFF	; 255
    2c8a:	20 81       	ld	r18, Z
    2c8c:	31 81       	ldd	r19, Z+1	; 0x01
    2c8e:	8d 91       	ld	r24, X+
    2c90:	9c 91       	ld	r25, X
    2c92:	11 97       	sbiw	r26, 0x01	; 1
    2c94:	82 17       	cp	r24, r18
    2c96:	93 07       	cpc	r25, r19
    2c98:	08 f0       	brcs	.+2      	; 0x2c9c <main+0xaa6>
    2c9a:	7e c0       	rjmp	.+252    	; 0x2d98 <main+0xba2>
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e1 57       	subi	r30, 0x71	; 113
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	80 81       	ld	r24, Z
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
    2ca6:	80 31       	cpi	r24, 0x10	; 16
    2ca8:	91 05       	cpc	r25, r1
    2caa:	08 f4       	brcc	.+2      	; 0x2cae <main+0xab8>
    2cac:	75 c0       	rjmp	.+234    	; 0x2d98 <main+0xba2>
                    Motors_Right();
    2cae:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <Motors_Right>
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	a6 e1       	ldi	r26, 0x16	; 22
    2cb8:	b4 e4       	ldi	r27, 0x44	; 68
    2cba:	8d ab       	std	Y+53, r24	; 0x35
    2cbc:	9e ab       	std	Y+54, r25	; 0x36
    2cbe:	af ab       	std	Y+55, r26	; 0x37
    2cc0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc2:	6d a9       	ldd	r22, Y+53	; 0x35
    2cc4:	7e a9       	ldd	r23, Y+54	; 0x36
    2cc6:	8f a9       	ldd	r24, Y+55	; 0x37
    2cc8:	98 ad       	ldd	r25, Y+56	; 0x38
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	4a e7       	ldi	r20, 0x7A	; 122
    2cd0:	53 e4       	ldi	r21, 0x43	; 67
    2cd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	89 ab       	std	Y+49, r24	; 0x31
    2cdc:	9a ab       	std	Y+50, r25	; 0x32
    2cde:	ab ab       	std	Y+51, r26	; 0x33
    2ce0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ce2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ce4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ce6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ce8:	9c a9       	ldd	r25, Y+52	; 0x34
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e8       	ldi	r20, 0x80	; 128
    2cf0:	5f e3       	ldi	r21, 0x3F	; 63
    2cf2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cf6:	88 23       	and	r24, r24
    2cf8:	2c f4       	brge	.+10     	; 0x2d04 <main+0xb0e>
		__ticks = 1;
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	98 ab       	std	Y+48, r25	; 0x30
    2d00:	8f a7       	std	Y+47, r24	; 0x2f
    2d02:	3f c0       	rjmp	.+126    	; 0x2d82 <main+0xb8c>
	else if (__tmp > 65535)
    2d04:	69 a9       	ldd	r22, Y+49	; 0x31
    2d06:	7a a9       	ldd	r23, Y+50	; 0x32
    2d08:	8b a9       	ldd	r24, Y+51	; 0x33
    2d0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	3f ef       	ldi	r19, 0xFF	; 255
    2d10:	4f e7       	ldi	r20, 0x7F	; 127
    2d12:	57 e4       	ldi	r21, 0x47	; 71
    2d14:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d18:	18 16       	cp	r1, r24
    2d1a:	4c f5       	brge	.+82     	; 0x2d6e <main+0xb78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1c:	6d a9       	ldd	r22, Y+53	; 0x35
    2d1e:	7e a9       	ldd	r23, Y+54	; 0x36
    2d20:	8f a9       	ldd	r24, Y+55	; 0x37
    2d22:	98 ad       	ldd	r25, Y+56	; 0x38
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e2       	ldi	r20, 0x20	; 32
    2d2a:	51 e4       	ldi	r21, 0x41	; 65
    2d2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	bc 01       	movw	r22, r24
    2d36:	cd 01       	movw	r24, r26
    2d38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	98 ab       	std	Y+48, r25	; 0x30
    2d42:	8f a7       	std	Y+47, r24	; 0x2f
    2d44:	0f c0       	rjmp	.+30     	; 0x2d64 <main+0xb6e>
    2d46:	89 e1       	ldi	r24, 0x19	; 25
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	9e a7       	std	Y+46, r25	; 0x2e
    2d4c:	8d a7       	std	Y+45, r24	; 0x2d
    2d4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d50:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <main+0xb5c>
    2d56:	9e a7       	std	Y+46, r25	; 0x2e
    2d58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d5c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	98 ab       	std	Y+48, r25	; 0x30
    2d62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d64:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d66:	98 a9       	ldd	r25, Y+48	; 0x30
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	69 f7       	brne	.-38     	; 0x2d46 <main+0xb50>
    2d6c:	16 c1       	rjmp	.+556    	; 0x2f9a <main+0xda4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6e:	69 a9       	ldd	r22, Y+49	; 0x31
    2d70:	7a a9       	ldd	r23, Y+50	; 0x32
    2d72:	8b a9       	ldd	r24, Y+51	; 0x33
    2d74:	9c a9       	ldd	r25, Y+52	; 0x34
    2d76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	98 ab       	std	Y+48, r25	; 0x30
    2d80:	8f a7       	std	Y+47, r24	; 0x2f
    2d82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d84:	98 a9       	ldd	r25, Y+48	; 0x30
    2d86:	9c a7       	std	Y+44, r25	; 0x2c
    2d88:	8b a7       	std	Y+43, r24	; 0x2b
    2d8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	f1 f7       	brne	.-4      	; 0x2d8e <main+0xb98>
    2d92:	9c a7       	std	Y+44, r25	; 0x2c
    2d94:	8b a7       	std	Y+43, r24	; 0x2b
    2d96:	01 c1       	rjmp	.+514    	; 0x2f9a <main+0xda4>
                    _delay_ms(600);
                } else if (leftDist > rightDist && leftDist > THRESHOLD) {
    2d98:	fe 01       	movw	r30, r28
    2d9a:	e3 57       	subi	r30, 0x73	; 115
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	de 01       	movw	r26, r28
    2da0:	a1 57       	subi	r26, 0x71	; 113
    2da2:	bf 4f       	sbci	r27, 0xFF	; 255
    2da4:	20 81       	ld	r18, Z
    2da6:	31 81       	ldd	r19, Z+1	; 0x01
    2da8:	8d 91       	ld	r24, X+
    2daa:	9c 91       	ld	r25, X
    2dac:	11 97       	sbiw	r26, 0x01	; 1
    2dae:	82 17       	cp	r24, r18
    2db0:	93 07       	cpc	r25, r19
    2db2:	08 f0       	brcs	.+2      	; 0x2db6 <main+0xbc0>
    2db4:	7e c0       	rjmp	.+252    	; 0x2eb2 <main+0xcbc>
    2db6:	fe 01       	movw	r30, r28
    2db8:	e3 57       	subi	r30, 0x73	; 115
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	80 81       	ld	r24, Z
    2dbe:	91 81       	ldd	r25, Z+1	; 0x01
    2dc0:	80 31       	cpi	r24, 0x10	; 16
    2dc2:	91 05       	cpc	r25, r1
    2dc4:	08 f4       	brcc	.+2      	; 0x2dc8 <main+0xbd2>
    2dc6:	75 c0       	rjmp	.+234    	; 0x2eb2 <main+0xcbc>
                    Motors_Left();
    2dc8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <Motors_Left>
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	a6 e1       	ldi	r26, 0x16	; 22
    2dd2:	b4 e4       	ldi	r27, 0x44	; 68
    2dd4:	8f a3       	std	Y+39, r24	; 0x27
    2dd6:	98 a7       	std	Y+40, r25	; 0x28
    2dd8:	a9 a7       	std	Y+41, r26	; 0x29
    2dda:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ddc:	6f a1       	ldd	r22, Y+39	; 0x27
    2dde:	78 a5       	ldd	r23, Y+40	; 0x28
    2de0:	89 a5       	ldd	r24, Y+41	; 0x29
    2de2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	4a e7       	ldi	r20, 0x7A	; 122
    2dea:	53 e4       	ldi	r21, 0x43	; 67
    2dec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	8b a3       	std	Y+35, r24	; 0x23
    2df6:	9c a3       	std	Y+36, r25	; 0x24
    2df8:	ad a3       	std	Y+37, r26	; 0x25
    2dfa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2dfc:	6b a1       	ldd	r22, Y+35	; 0x23
    2dfe:	7c a1       	ldd	r23, Y+36	; 0x24
    2e00:	8d a1       	ldd	r24, Y+37	; 0x25
    2e02:	9e a1       	ldd	r25, Y+38	; 0x26
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e8       	ldi	r20, 0x80	; 128
    2e0a:	5f e3       	ldi	r21, 0x3F	; 63
    2e0c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e10:	88 23       	and	r24, r24
    2e12:	2c f4       	brge	.+10     	; 0x2e1e <main+0xc28>
		__ticks = 1;
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	9a a3       	std	Y+34, r25	; 0x22
    2e1a:	89 a3       	std	Y+33, r24	; 0x21
    2e1c:	3f c0       	rjmp	.+126    	; 0x2e9c <main+0xca6>
	else if (__tmp > 65535)
    2e1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e20:	7c a1       	ldd	r23, Y+36	; 0x24
    2e22:	8d a1       	ldd	r24, Y+37	; 0x25
    2e24:	9e a1       	ldd	r25, Y+38	; 0x26
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	3f ef       	ldi	r19, 0xFF	; 255
    2e2a:	4f e7       	ldi	r20, 0x7F	; 127
    2e2c:	57 e4       	ldi	r21, 0x47	; 71
    2e2e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e32:	18 16       	cp	r1, r24
    2e34:	4c f5       	brge	.+82     	; 0x2e88 <main+0xc92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e36:	6f a1       	ldd	r22, Y+39	; 0x27
    2e38:	78 a5       	ldd	r23, Y+40	; 0x28
    2e3a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	40 e2       	ldi	r20, 0x20	; 32
    2e44:	51 e4       	ldi	r21, 0x41	; 65
    2e46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	bc 01       	movw	r22, r24
    2e50:	cd 01       	movw	r24, r26
    2e52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	9a a3       	std	Y+34, r25	; 0x22
    2e5c:	89 a3       	std	Y+33, r24	; 0x21
    2e5e:	0f c0       	rjmp	.+30     	; 0x2e7e <main+0xc88>
    2e60:	89 e1       	ldi	r24, 0x19	; 25
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	98 a3       	std	Y+32, r25	; 0x20
    2e66:	8f 8f       	std	Y+31, r24	; 0x1f
    2e68:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e6a:	98 a1       	ldd	r25, Y+32	; 0x20
    2e6c:	01 97       	sbiw	r24, 0x01	; 1
    2e6e:	f1 f7       	brne	.-4      	; 0x2e6c <main+0xc76>
    2e70:	98 a3       	std	Y+32, r25	; 0x20
    2e72:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e74:	89 a1       	ldd	r24, Y+33	; 0x21
    2e76:	9a a1       	ldd	r25, Y+34	; 0x22
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	9a a3       	std	Y+34, r25	; 0x22
    2e7c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e80:	9a a1       	ldd	r25, Y+34	; 0x22
    2e82:	00 97       	sbiw	r24, 0x00	; 0
    2e84:	69 f7       	brne	.-38     	; 0x2e60 <main+0xc6a>
    2e86:	89 c0       	rjmp	.+274    	; 0x2f9a <main+0xda4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e88:	6b a1       	ldd	r22, Y+35	; 0x23
    2e8a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e8c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e8e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e94:	dc 01       	movw	r26, r24
    2e96:	cb 01       	movw	r24, r22
    2e98:	9a a3       	std	Y+34, r25	; 0x22
    2e9a:	89 a3       	std	Y+33, r24	; 0x21
    2e9c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e9e:	9a a1       	ldd	r25, Y+34	; 0x22
    2ea0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ea2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ea4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ea6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <main+0xcb2>
    2eac:	9e 8f       	std	Y+30, r25	; 0x1e
    2eae:	8d 8f       	std	Y+29, r24	; 0x1d
    2eb0:	74 c0       	rjmp	.+232    	; 0x2f9a <main+0xda4>
                    _delay_ms(600);
                } else {
                    Motors_Backward();
    2eb2:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Motors_Backward>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	aa ef       	ldi	r26, 0xFA	; 250
    2ebc:	b3 e4       	ldi	r27, 0x43	; 67
    2ebe:	89 8f       	std	Y+25, r24	; 0x19
    2ec0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ec2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ec4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ecc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	4a e7       	ldi	r20, 0x7A	; 122
    2ed4:	53 e4       	ldi	r21, 0x43	; 67
    2ed6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	8d 8b       	std	Y+21, r24	; 0x15
    2ee0:	9e 8b       	std	Y+22, r25	; 0x16
    2ee2:	af 8b       	std	Y+23, r26	; 0x17
    2ee4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ee6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eea:	8f 89       	ldd	r24, Y+23	; 0x17
    2eec:	98 8d       	ldd	r25, Y+24	; 0x18
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e8       	ldi	r20, 0x80	; 128
    2ef4:	5f e3       	ldi	r21, 0x3F	; 63
    2ef6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2efa:	88 23       	and	r24, r24
    2efc:	2c f4       	brge	.+10     	; 0x2f08 <main+0xd12>
		__ticks = 1;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	9c 8b       	std	Y+20, r25	; 0x14
    2f04:	8b 8b       	std	Y+19, r24	; 0x13
    2f06:	3f c0       	rjmp	.+126    	; 0x2f86 <main+0xd90>
	else if (__tmp > 65535)
    2f08:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	3f ef       	ldi	r19, 0xFF	; 255
    2f14:	4f e7       	ldi	r20, 0x7F	; 127
    2f16:	57 e4       	ldi	r21, 0x47	; 71
    2f18:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f1c:	18 16       	cp	r1, r24
    2f1e:	4c f5       	brge	.+82     	; 0x2f72 <main+0xd7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f20:	69 8d       	ldd	r22, Y+25	; 0x19
    2f22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e2       	ldi	r20, 0x20	; 32
    2f2e:	51 e4       	ldi	r21, 0x41	; 65
    2f30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	bc 01       	movw	r22, r24
    2f3a:	cd 01       	movw	r24, r26
    2f3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	9c 8b       	std	Y+20, r25	; 0x14
    2f46:	8b 8b       	std	Y+19, r24	; 0x13
    2f48:	0f c0       	rjmp	.+30     	; 0x2f68 <main+0xd72>
    2f4a:	89 e1       	ldi	r24, 0x19	; 25
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	9a 8b       	std	Y+18, r25	; 0x12
    2f50:	89 8b       	std	Y+17, r24	; 0x11
    2f52:	89 89       	ldd	r24, Y+17	; 0x11
    2f54:	9a 89       	ldd	r25, Y+18	; 0x12
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <main+0xd60>
    2f5a:	9a 8b       	std	Y+18, r25	; 0x12
    2f5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f60:	9c 89       	ldd	r25, Y+20	; 0x14
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	9c 8b       	std	Y+20, r25	; 0x14
    2f66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f68:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	69 f7       	brne	.-38     	; 0x2f4a <main+0xd54>
    2f70:	14 c0       	rjmp	.+40     	; 0x2f9a <main+0xda4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f72:	6d 89       	ldd	r22, Y+21	; 0x15
    2f74:	7e 89       	ldd	r23, Y+22	; 0x16
    2f76:	8f 89       	ldd	r24, Y+23	; 0x17
    2f78:	98 8d       	ldd	r25, Y+24	; 0x18
    2f7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	9c 8b       	std	Y+20, r25	; 0x14
    2f84:	8b 8b       	std	Y+19, r24	; 0x13
    2f86:	8b 89       	ldd	r24, Y+19	; 0x13
    2f88:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8a:	98 8b       	std	Y+16, r25	; 0x10
    2f8c:	8f 87       	std	Y+15, r24	; 0x0f
    2f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f90:	98 89       	ldd	r25, Y+16	; 0x10
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <main+0xd9c>
    2f96:	98 8b       	std	Y+16, r25	; 0x10
    2f98:	8f 87       	std	Y+15, r24	; 0x0f
                    _delay_ms(500);
                }
                Motors_Stop();
    2f9a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Motors_Stop>
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	a8 ec       	ldi	r26, 0xC8	; 200
    2fa4:	b2 e4       	ldi	r27, 0x42	; 66
    2fa6:	8b 87       	std	Y+11, r24	; 0x0b
    2fa8:	9c 87       	std	Y+12, r25	; 0x0c
    2faa:	ad 87       	std	Y+13, r26	; 0x0d
    2fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	4a e7       	ldi	r20, 0x7A	; 122
    2fbc:	53 e4       	ldi	r21, 0x43	; 67
    2fbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	8f 83       	std	Y+7, r24	; 0x07
    2fc8:	98 87       	std	Y+8, r25	; 0x08
    2fca:	a9 87       	std	Y+9, r26	; 0x09
    2fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fce:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd0:	78 85       	ldd	r23, Y+8	; 0x08
    2fd2:	89 85       	ldd	r24, Y+9	; 0x09
    2fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e8       	ldi	r20, 0x80	; 128
    2fdc:	5f e3       	ldi	r21, 0x3F	; 63
    2fde:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2fe2:	88 23       	and	r24, r24
    2fe4:	2c f4       	brge	.+10     	; 0x2ff0 <main+0xdfa>
		__ticks = 1;
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9e 83       	std	Y+6, r25	; 0x06
    2fec:	8d 83       	std	Y+5, r24	; 0x05
    2fee:	3f c0       	rjmp	.+126    	; 0x306e <main+0xe78>
	else if (__tmp > 65535)
    2ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff2:	78 85       	ldd	r23, Y+8	; 0x08
    2ff4:	89 85       	ldd	r24, Y+9	; 0x09
    2ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	3f ef       	ldi	r19, 0xFF	; 255
    2ffc:	4f e7       	ldi	r20, 0x7F	; 127
    2ffe:	57 e4       	ldi	r21, 0x47	; 71
    3000:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3004:	18 16       	cp	r1, r24
    3006:	4c f5       	brge	.+82     	; 0x305a <main+0xe64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3008:	6b 85       	ldd	r22, Y+11	; 0x0b
    300a:	7c 85       	ldd	r23, Y+12	; 0x0c
    300c:	8d 85       	ldd	r24, Y+13	; 0x0d
    300e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e2       	ldi	r20, 0x20	; 32
    3016:	51 e4       	ldi	r21, 0x41	; 65
    3018:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	bc 01       	movw	r22, r24
    3022:	cd 01       	movw	r24, r26
    3024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9e 83       	std	Y+6, r25	; 0x06
    302e:	8d 83       	std	Y+5, r24	; 0x05
    3030:	0f c0       	rjmp	.+30     	; 0x3050 <main+0xe5a>
    3032:	89 e1       	ldi	r24, 0x19	; 25
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	9c 83       	std	Y+4, r25	; 0x04
    3038:	8b 83       	std	Y+3, r24	; 0x03
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	9c 81       	ldd	r25, Y+4	; 0x04
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <main+0xe48>
    3042:	9c 83       	std	Y+4, r25	; 0x04
    3044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3046:	8d 81       	ldd	r24, Y+5	; 0x05
    3048:	9e 81       	ldd	r25, Y+6	; 0x06
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	9e 83       	std	Y+6, r25	; 0x06
    304e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3050:	8d 81       	ldd	r24, Y+5	; 0x05
    3052:	9e 81       	ldd	r25, Y+6	; 0x06
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	69 f7       	brne	.-38     	; 0x3032 <main+0xe3c>
    3058:	a8 c9       	rjmp	.-3248   	; 0x23aa <main+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305a:	6f 81       	ldd	r22, Y+7	; 0x07
    305c:	78 85       	ldd	r23, Y+8	; 0x08
    305e:	89 85       	ldd	r24, Y+9	; 0x09
    3060:	9a 85       	ldd	r25, Y+10	; 0x0a
    3062:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	9e 83       	std	Y+6, r25	; 0x06
    306c:	8d 83       	std	Y+5, r24	; 0x05
    306e:	8d 81       	ldd	r24, Y+5	; 0x05
    3070:	9e 81       	ldd	r25, Y+6	; 0x06
    3072:	9a 83       	std	Y+2, r25	; 0x02
    3074:	89 83       	std	Y+1, r24	; 0x01
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	9a 81       	ldd	r25, Y+2	; 0x02
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	f1 f7       	brne	.-4      	; 0x307a <main+0xe84>
    307e:	9a 83       	std	Y+2, r25	; 0x02
    3080:	89 83       	std	Y+1, r24	; 0x01
    3082:	93 c9       	rjmp	.-3290   	; 0x23aa <main+0x1b4>

00003084 <__mulsi3>:
    3084:	62 9f       	mul	r22, r18
    3086:	d0 01       	movw	r26, r0
    3088:	73 9f       	mul	r23, r19
    308a:	f0 01       	movw	r30, r0
    308c:	82 9f       	mul	r24, r18
    308e:	e0 0d       	add	r30, r0
    3090:	f1 1d       	adc	r31, r1
    3092:	64 9f       	mul	r22, r20
    3094:	e0 0d       	add	r30, r0
    3096:	f1 1d       	adc	r31, r1
    3098:	92 9f       	mul	r25, r18
    309a:	f0 0d       	add	r31, r0
    309c:	83 9f       	mul	r24, r19
    309e:	f0 0d       	add	r31, r0
    30a0:	74 9f       	mul	r23, r20
    30a2:	f0 0d       	add	r31, r0
    30a4:	65 9f       	mul	r22, r21
    30a6:	f0 0d       	add	r31, r0
    30a8:	99 27       	eor	r25, r25
    30aa:	72 9f       	mul	r23, r18
    30ac:	b0 0d       	add	r27, r0
    30ae:	e1 1d       	adc	r30, r1
    30b0:	f9 1f       	adc	r31, r25
    30b2:	63 9f       	mul	r22, r19
    30b4:	b0 0d       	add	r27, r0
    30b6:	e1 1d       	adc	r30, r1
    30b8:	f9 1f       	adc	r31, r25
    30ba:	bd 01       	movw	r22, r26
    30bc:	cf 01       	movw	r24, r30
    30be:	11 24       	eor	r1, r1
    30c0:	08 95       	ret

000030c2 <__udivmodhi4>:
    30c2:	aa 1b       	sub	r26, r26
    30c4:	bb 1b       	sub	r27, r27
    30c6:	51 e1       	ldi	r21, 0x11	; 17
    30c8:	07 c0       	rjmp	.+14     	; 0x30d8 <__udivmodhi4_ep>

000030ca <__udivmodhi4_loop>:
    30ca:	aa 1f       	adc	r26, r26
    30cc:	bb 1f       	adc	r27, r27
    30ce:	a6 17       	cp	r26, r22
    30d0:	b7 07       	cpc	r27, r23
    30d2:	10 f0       	brcs	.+4      	; 0x30d8 <__udivmodhi4_ep>
    30d4:	a6 1b       	sub	r26, r22
    30d6:	b7 0b       	sbc	r27, r23

000030d8 <__udivmodhi4_ep>:
    30d8:	88 1f       	adc	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	5a 95       	dec	r21
    30de:	a9 f7       	brne	.-22     	; 0x30ca <__udivmodhi4_loop>
    30e0:	80 95       	com	r24
    30e2:	90 95       	com	r25
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	08 95       	ret

000030ea <__udivmodsi4>:
    30ea:	a1 e2       	ldi	r26, 0x21	; 33
    30ec:	1a 2e       	mov	r1, r26
    30ee:	aa 1b       	sub	r26, r26
    30f0:	bb 1b       	sub	r27, r27
    30f2:	fd 01       	movw	r30, r26
    30f4:	0d c0       	rjmp	.+26     	; 0x3110 <__udivmodsi4_ep>

000030f6 <__udivmodsi4_loop>:
    30f6:	aa 1f       	adc	r26, r26
    30f8:	bb 1f       	adc	r27, r27
    30fa:	ee 1f       	adc	r30, r30
    30fc:	ff 1f       	adc	r31, r31
    30fe:	a2 17       	cp	r26, r18
    3100:	b3 07       	cpc	r27, r19
    3102:	e4 07       	cpc	r30, r20
    3104:	f5 07       	cpc	r31, r21
    3106:	20 f0       	brcs	.+8      	; 0x3110 <__udivmodsi4_ep>
    3108:	a2 1b       	sub	r26, r18
    310a:	b3 0b       	sbc	r27, r19
    310c:	e4 0b       	sbc	r30, r20
    310e:	f5 0b       	sbc	r31, r21

00003110 <__udivmodsi4_ep>:
    3110:	66 1f       	adc	r22, r22
    3112:	77 1f       	adc	r23, r23
    3114:	88 1f       	adc	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	1a 94       	dec	r1
    311a:	69 f7       	brne	.-38     	; 0x30f6 <__udivmodsi4_loop>
    311c:	60 95       	com	r22
    311e:	70 95       	com	r23
    3120:	80 95       	com	r24
    3122:	90 95       	com	r25
    3124:	9b 01       	movw	r18, r22
    3126:	ac 01       	movw	r20, r24
    3128:	bd 01       	movw	r22, r26
    312a:	cf 01       	movw	r24, r30
    312c:	08 95       	ret

0000312e <__divmodsi4>:
    312e:	97 fb       	bst	r25, 7
    3130:	09 2e       	mov	r0, r25
    3132:	05 26       	eor	r0, r21
    3134:	0e d0       	rcall	.+28     	; 0x3152 <__divmodsi4_neg1>
    3136:	57 fd       	sbrc	r21, 7
    3138:	04 d0       	rcall	.+8      	; 0x3142 <__divmodsi4_neg2>
    313a:	d7 df       	rcall	.-82     	; 0x30ea <__udivmodsi4>
    313c:	0a d0       	rcall	.+20     	; 0x3152 <__divmodsi4_neg1>
    313e:	00 1c       	adc	r0, r0
    3140:	38 f4       	brcc	.+14     	; 0x3150 <__divmodsi4_exit>

00003142 <__divmodsi4_neg2>:
    3142:	50 95       	com	r21
    3144:	40 95       	com	r20
    3146:	30 95       	com	r19
    3148:	21 95       	neg	r18
    314a:	3f 4f       	sbci	r19, 0xFF	; 255
    314c:	4f 4f       	sbci	r20, 0xFF	; 255
    314e:	5f 4f       	sbci	r21, 0xFF	; 255

00003150 <__divmodsi4_exit>:
    3150:	08 95       	ret

00003152 <__divmodsi4_neg1>:
    3152:	f6 f7       	brtc	.-4      	; 0x3150 <__divmodsi4_exit>
    3154:	90 95       	com	r25
    3156:	80 95       	com	r24
    3158:	70 95       	com	r23
    315a:	61 95       	neg	r22
    315c:	7f 4f       	sbci	r23, 0xFF	; 255
    315e:	8f 4f       	sbci	r24, 0xFF	; 255
    3160:	9f 4f       	sbci	r25, 0xFF	; 255
    3162:	08 95       	ret

00003164 <__prologue_saves__>:
    3164:	2f 92       	push	r2
    3166:	3f 92       	push	r3
    3168:	4f 92       	push	r4
    316a:	5f 92       	push	r5
    316c:	6f 92       	push	r6
    316e:	7f 92       	push	r7
    3170:	8f 92       	push	r8
    3172:	9f 92       	push	r9
    3174:	af 92       	push	r10
    3176:	bf 92       	push	r11
    3178:	cf 92       	push	r12
    317a:	df 92       	push	r13
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	ca 1b       	sub	r28, r26
    318e:	db 0b       	sbc	r29, r27
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	f8 94       	cli
    3194:	de bf       	out	0x3e, r29	; 62
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	cd bf       	out	0x3d, r28	; 61
    319a:	09 94       	ijmp

0000319c <__epilogue_restores__>:
    319c:	2a 88       	ldd	r2, Y+18	; 0x12
    319e:	39 88       	ldd	r3, Y+17	; 0x11
    31a0:	48 88       	ldd	r4, Y+16	; 0x10
    31a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    31a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    31a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    31a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    31aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    31ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    31ae:	b9 84       	ldd	r11, Y+9	; 0x09
    31b0:	c8 84       	ldd	r12, Y+8	; 0x08
    31b2:	df 80       	ldd	r13, Y+7	; 0x07
    31b4:	ee 80       	ldd	r14, Y+6	; 0x06
    31b6:	fd 80       	ldd	r15, Y+5	; 0x05
    31b8:	0c 81       	ldd	r16, Y+4	; 0x04
    31ba:	1b 81       	ldd	r17, Y+3	; 0x03
    31bc:	aa 81       	ldd	r26, Y+2	; 0x02
    31be:	b9 81       	ldd	r27, Y+1	; 0x01
    31c0:	ce 0f       	add	r28, r30
    31c2:	d1 1d       	adc	r29, r1
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	ed 01       	movw	r28, r26
    31d0:	08 95       	ret

000031d2 <sprintf>:
    31d2:	ae e0       	ldi	r26, 0x0E	; 14
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	ef ee       	ldi	r30, 0xEF	; 239
    31d8:	f8 e1       	ldi	r31, 0x18	; 24
    31da:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__prologue_saves__+0x1c>
    31de:	0d 89       	ldd	r16, Y+21	; 0x15
    31e0:	1e 89       	ldd	r17, Y+22	; 0x16
    31e2:	86 e0       	ldi	r24, 0x06	; 6
    31e4:	8c 83       	std	Y+4, r24	; 0x04
    31e6:	1a 83       	std	Y+2, r17	; 0x02
    31e8:	09 83       	std	Y+1, r16	; 0x01
    31ea:	8f ef       	ldi	r24, 0xFF	; 255
    31ec:	9f e7       	ldi	r25, 0x7F	; 127
    31ee:	9e 83       	std	Y+6, r25	; 0x06
    31f0:	8d 83       	std	Y+5, r24	; 0x05
    31f2:	9e 01       	movw	r18, r28
    31f4:	27 5e       	subi	r18, 0xE7	; 231
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
    31f8:	ce 01       	movw	r24, r28
    31fa:	01 96       	adiw	r24, 0x01	; 1
    31fc:	6f 89       	ldd	r22, Y+23	; 0x17
    31fe:	78 8d       	ldd	r23, Y+24	; 0x18
    3200:	a9 01       	movw	r20, r18
    3202:	0e 94 0d 19 	call	0x321a	; 0x321a <vfprintf>
    3206:	2f 81       	ldd	r18, Y+7	; 0x07
    3208:	38 85       	ldd	r19, Y+8	; 0x08
    320a:	02 0f       	add	r16, r18
    320c:	13 1f       	adc	r17, r19
    320e:	f8 01       	movw	r30, r16
    3210:	10 82       	st	Z, r1
    3212:	2e 96       	adiw	r28, 0x0e	; 14
    3214:	e4 e0       	ldi	r30, 0x04	; 4
    3216:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__epilogue_restores__+0x1c>

0000321a <vfprintf>:
    321a:	ab e0       	ldi	r26, 0x0B	; 11
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	e3 e1       	ldi	r30, 0x13	; 19
    3220:	f9 e1       	ldi	r31, 0x19	; 25
    3222:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__prologue_saves__>
    3226:	3c 01       	movw	r6, r24
    3228:	2b 01       	movw	r4, r22
    322a:	5a 01       	movw	r10, r20
    322c:	fc 01       	movw	r30, r24
    322e:	17 82       	std	Z+7, r1	; 0x07
    3230:	16 82       	std	Z+6, r1	; 0x06
    3232:	83 81       	ldd	r24, Z+3	; 0x03
    3234:	81 fd       	sbrc	r24, 1
    3236:	03 c0       	rjmp	.+6      	; 0x323e <vfprintf+0x24>
    3238:	6f ef       	ldi	r22, 0xFF	; 255
    323a:	7f ef       	ldi	r23, 0xFF	; 255
    323c:	c6 c1       	rjmp	.+908    	; 0x35ca <vfprintf+0x3b0>
    323e:	9a e0       	ldi	r25, 0x0A	; 10
    3240:	89 2e       	mov	r8, r25
    3242:	1e 01       	movw	r2, r28
    3244:	08 94       	sec
    3246:	21 1c       	adc	r2, r1
    3248:	31 1c       	adc	r3, r1
    324a:	f3 01       	movw	r30, r6
    324c:	23 81       	ldd	r18, Z+3	; 0x03
    324e:	f2 01       	movw	r30, r4
    3250:	23 fd       	sbrc	r18, 3
    3252:	85 91       	lpm	r24, Z+
    3254:	23 ff       	sbrs	r18, 3
    3256:	81 91       	ld	r24, Z+
    3258:	2f 01       	movw	r4, r30
    325a:	88 23       	and	r24, r24
    325c:	09 f4       	brne	.+2      	; 0x3260 <vfprintf+0x46>
    325e:	b2 c1       	rjmp	.+868    	; 0x35c4 <vfprintf+0x3aa>
    3260:	85 32       	cpi	r24, 0x25	; 37
    3262:	39 f4       	brne	.+14     	; 0x3272 <vfprintf+0x58>
    3264:	23 fd       	sbrc	r18, 3
    3266:	85 91       	lpm	r24, Z+
    3268:	23 ff       	sbrs	r18, 3
    326a:	81 91       	ld	r24, Z+
    326c:	2f 01       	movw	r4, r30
    326e:	85 32       	cpi	r24, 0x25	; 37
    3270:	29 f4       	brne	.+10     	; 0x327c <vfprintf+0x62>
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	b3 01       	movw	r22, r6
    3276:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    327a:	e7 cf       	rjmp	.-50     	; 0x324a <vfprintf+0x30>
    327c:	98 2f       	mov	r25, r24
    327e:	ff 24       	eor	r15, r15
    3280:	ee 24       	eor	r14, r14
    3282:	99 24       	eor	r9, r9
    3284:	ff e1       	ldi	r31, 0x1F	; 31
    3286:	ff 15       	cp	r31, r15
    3288:	d0 f0       	brcs	.+52     	; 0x32be <vfprintf+0xa4>
    328a:	9b 32       	cpi	r25, 0x2B	; 43
    328c:	69 f0       	breq	.+26     	; 0x32a8 <vfprintf+0x8e>
    328e:	9c 32       	cpi	r25, 0x2C	; 44
    3290:	28 f4       	brcc	.+10     	; 0x329c <vfprintf+0x82>
    3292:	90 32       	cpi	r25, 0x20	; 32
    3294:	59 f0       	breq	.+22     	; 0x32ac <vfprintf+0x92>
    3296:	93 32       	cpi	r25, 0x23	; 35
    3298:	91 f4       	brne	.+36     	; 0x32be <vfprintf+0xa4>
    329a:	0e c0       	rjmp	.+28     	; 0x32b8 <vfprintf+0x9e>
    329c:	9d 32       	cpi	r25, 0x2D	; 45
    329e:	49 f0       	breq	.+18     	; 0x32b2 <vfprintf+0x98>
    32a0:	90 33       	cpi	r25, 0x30	; 48
    32a2:	69 f4       	brne	.+26     	; 0x32be <vfprintf+0xa4>
    32a4:	41 e0       	ldi	r20, 0x01	; 1
    32a6:	24 c0       	rjmp	.+72     	; 0x32f0 <vfprintf+0xd6>
    32a8:	52 e0       	ldi	r21, 0x02	; 2
    32aa:	f5 2a       	or	r15, r21
    32ac:	84 e0       	ldi	r24, 0x04	; 4
    32ae:	f8 2a       	or	r15, r24
    32b0:	28 c0       	rjmp	.+80     	; 0x3302 <vfprintf+0xe8>
    32b2:	98 e0       	ldi	r25, 0x08	; 8
    32b4:	f9 2a       	or	r15, r25
    32b6:	25 c0       	rjmp	.+74     	; 0x3302 <vfprintf+0xe8>
    32b8:	e0 e1       	ldi	r30, 0x10	; 16
    32ba:	fe 2a       	or	r15, r30
    32bc:	22 c0       	rjmp	.+68     	; 0x3302 <vfprintf+0xe8>
    32be:	f7 fc       	sbrc	r15, 7
    32c0:	29 c0       	rjmp	.+82     	; 0x3314 <vfprintf+0xfa>
    32c2:	89 2f       	mov	r24, r25
    32c4:	80 53       	subi	r24, 0x30	; 48
    32c6:	8a 30       	cpi	r24, 0x0A	; 10
    32c8:	70 f4       	brcc	.+28     	; 0x32e6 <vfprintf+0xcc>
    32ca:	f6 fe       	sbrs	r15, 6
    32cc:	05 c0       	rjmp	.+10     	; 0x32d8 <vfprintf+0xbe>
    32ce:	98 9c       	mul	r9, r8
    32d0:	90 2c       	mov	r9, r0
    32d2:	11 24       	eor	r1, r1
    32d4:	98 0e       	add	r9, r24
    32d6:	15 c0       	rjmp	.+42     	; 0x3302 <vfprintf+0xe8>
    32d8:	e8 9c       	mul	r14, r8
    32da:	e0 2c       	mov	r14, r0
    32dc:	11 24       	eor	r1, r1
    32de:	e8 0e       	add	r14, r24
    32e0:	f0 e2       	ldi	r31, 0x20	; 32
    32e2:	ff 2a       	or	r15, r31
    32e4:	0e c0       	rjmp	.+28     	; 0x3302 <vfprintf+0xe8>
    32e6:	9e 32       	cpi	r25, 0x2E	; 46
    32e8:	29 f4       	brne	.+10     	; 0x32f4 <vfprintf+0xda>
    32ea:	f6 fc       	sbrc	r15, 6
    32ec:	6b c1       	rjmp	.+726    	; 0x35c4 <vfprintf+0x3aa>
    32ee:	40 e4       	ldi	r20, 0x40	; 64
    32f0:	f4 2a       	or	r15, r20
    32f2:	07 c0       	rjmp	.+14     	; 0x3302 <vfprintf+0xe8>
    32f4:	9c 36       	cpi	r25, 0x6C	; 108
    32f6:	19 f4       	brne	.+6      	; 0x32fe <vfprintf+0xe4>
    32f8:	50 e8       	ldi	r21, 0x80	; 128
    32fa:	f5 2a       	or	r15, r21
    32fc:	02 c0       	rjmp	.+4      	; 0x3302 <vfprintf+0xe8>
    32fe:	98 36       	cpi	r25, 0x68	; 104
    3300:	49 f4       	brne	.+18     	; 0x3314 <vfprintf+0xfa>
    3302:	f2 01       	movw	r30, r4
    3304:	23 fd       	sbrc	r18, 3
    3306:	95 91       	lpm	r25, Z+
    3308:	23 ff       	sbrs	r18, 3
    330a:	91 91       	ld	r25, Z+
    330c:	2f 01       	movw	r4, r30
    330e:	99 23       	and	r25, r25
    3310:	09 f0       	breq	.+2      	; 0x3314 <vfprintf+0xfa>
    3312:	b8 cf       	rjmp	.-144    	; 0x3284 <vfprintf+0x6a>
    3314:	89 2f       	mov	r24, r25
    3316:	85 54       	subi	r24, 0x45	; 69
    3318:	83 30       	cpi	r24, 0x03	; 3
    331a:	18 f0       	brcs	.+6      	; 0x3322 <vfprintf+0x108>
    331c:	80 52       	subi	r24, 0x20	; 32
    331e:	83 30       	cpi	r24, 0x03	; 3
    3320:	38 f4       	brcc	.+14     	; 0x3330 <vfprintf+0x116>
    3322:	44 e0       	ldi	r20, 0x04	; 4
    3324:	50 e0       	ldi	r21, 0x00	; 0
    3326:	a4 0e       	add	r10, r20
    3328:	b5 1e       	adc	r11, r21
    332a:	5f e3       	ldi	r21, 0x3F	; 63
    332c:	59 83       	std	Y+1, r21	; 0x01
    332e:	0f c0       	rjmp	.+30     	; 0x334e <vfprintf+0x134>
    3330:	93 36       	cpi	r25, 0x63	; 99
    3332:	31 f0       	breq	.+12     	; 0x3340 <vfprintf+0x126>
    3334:	93 37       	cpi	r25, 0x73	; 115
    3336:	79 f0       	breq	.+30     	; 0x3356 <vfprintf+0x13c>
    3338:	93 35       	cpi	r25, 0x53	; 83
    333a:	09 f0       	breq	.+2      	; 0x333e <vfprintf+0x124>
    333c:	56 c0       	rjmp	.+172    	; 0x33ea <vfprintf+0x1d0>
    333e:	20 c0       	rjmp	.+64     	; 0x3380 <vfprintf+0x166>
    3340:	f5 01       	movw	r30, r10
    3342:	80 81       	ld	r24, Z
    3344:	89 83       	std	Y+1, r24	; 0x01
    3346:	42 e0       	ldi	r20, 0x02	; 2
    3348:	50 e0       	ldi	r21, 0x00	; 0
    334a:	a4 0e       	add	r10, r20
    334c:	b5 1e       	adc	r11, r21
    334e:	61 01       	movw	r12, r2
    3350:	01 e0       	ldi	r16, 0x01	; 1
    3352:	10 e0       	ldi	r17, 0x00	; 0
    3354:	12 c0       	rjmp	.+36     	; 0x337a <vfprintf+0x160>
    3356:	f5 01       	movw	r30, r10
    3358:	c0 80       	ld	r12, Z
    335a:	d1 80       	ldd	r13, Z+1	; 0x01
    335c:	f6 fc       	sbrc	r15, 6
    335e:	03 c0       	rjmp	.+6      	; 0x3366 <vfprintf+0x14c>
    3360:	6f ef       	ldi	r22, 0xFF	; 255
    3362:	7f ef       	ldi	r23, 0xFF	; 255
    3364:	02 c0       	rjmp	.+4      	; 0x336a <vfprintf+0x150>
    3366:	69 2d       	mov	r22, r9
    3368:	70 e0       	ldi	r23, 0x00	; 0
    336a:	42 e0       	ldi	r20, 0x02	; 2
    336c:	50 e0       	ldi	r21, 0x00	; 0
    336e:	a4 0e       	add	r10, r20
    3370:	b5 1e       	adc	r11, r21
    3372:	c6 01       	movw	r24, r12
    3374:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <strnlen>
    3378:	8c 01       	movw	r16, r24
    337a:	5f e7       	ldi	r21, 0x7F	; 127
    337c:	f5 22       	and	r15, r21
    337e:	14 c0       	rjmp	.+40     	; 0x33a8 <vfprintf+0x18e>
    3380:	f5 01       	movw	r30, r10
    3382:	c0 80       	ld	r12, Z
    3384:	d1 80       	ldd	r13, Z+1	; 0x01
    3386:	f6 fc       	sbrc	r15, 6
    3388:	03 c0       	rjmp	.+6      	; 0x3390 <vfprintf+0x176>
    338a:	6f ef       	ldi	r22, 0xFF	; 255
    338c:	7f ef       	ldi	r23, 0xFF	; 255
    338e:	02 c0       	rjmp	.+4      	; 0x3394 <vfprintf+0x17a>
    3390:	69 2d       	mov	r22, r9
    3392:	70 e0       	ldi	r23, 0x00	; 0
    3394:	42 e0       	ldi	r20, 0x02	; 2
    3396:	50 e0       	ldi	r21, 0x00	; 0
    3398:	a4 0e       	add	r10, r20
    339a:	b5 1e       	adc	r11, r21
    339c:	c6 01       	movw	r24, r12
    339e:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <strnlen_P>
    33a2:	8c 01       	movw	r16, r24
    33a4:	50 e8       	ldi	r21, 0x80	; 128
    33a6:	f5 2a       	or	r15, r21
    33a8:	f3 fe       	sbrs	r15, 3
    33aa:	07 c0       	rjmp	.+14     	; 0x33ba <vfprintf+0x1a0>
    33ac:	1a c0       	rjmp	.+52     	; 0x33e2 <vfprintf+0x1c8>
    33ae:	80 e2       	ldi	r24, 0x20	; 32
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	b3 01       	movw	r22, r6
    33b4:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    33b8:	ea 94       	dec	r14
    33ba:	8e 2d       	mov	r24, r14
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	08 17       	cp	r16, r24
    33c0:	19 07       	cpc	r17, r25
    33c2:	a8 f3       	brcs	.-22     	; 0x33ae <vfprintf+0x194>
    33c4:	0e c0       	rjmp	.+28     	; 0x33e2 <vfprintf+0x1c8>
    33c6:	f6 01       	movw	r30, r12
    33c8:	f7 fc       	sbrc	r15, 7
    33ca:	85 91       	lpm	r24, Z+
    33cc:	f7 fe       	sbrs	r15, 7
    33ce:	81 91       	ld	r24, Z+
    33d0:	6f 01       	movw	r12, r30
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	b3 01       	movw	r22, r6
    33d6:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    33da:	e1 10       	cpse	r14, r1
    33dc:	ea 94       	dec	r14
    33de:	01 50       	subi	r16, 0x01	; 1
    33e0:	10 40       	sbci	r17, 0x00	; 0
    33e2:	01 15       	cp	r16, r1
    33e4:	11 05       	cpc	r17, r1
    33e6:	79 f7       	brne	.-34     	; 0x33c6 <vfprintf+0x1ac>
    33e8:	ea c0       	rjmp	.+468    	; 0x35be <vfprintf+0x3a4>
    33ea:	94 36       	cpi	r25, 0x64	; 100
    33ec:	11 f0       	breq	.+4      	; 0x33f2 <vfprintf+0x1d8>
    33ee:	99 36       	cpi	r25, 0x69	; 105
    33f0:	69 f5       	brne	.+90     	; 0x344c <vfprintf+0x232>
    33f2:	f7 fe       	sbrs	r15, 7
    33f4:	08 c0       	rjmp	.+16     	; 0x3406 <vfprintf+0x1ec>
    33f6:	f5 01       	movw	r30, r10
    33f8:	20 81       	ld	r18, Z
    33fa:	31 81       	ldd	r19, Z+1	; 0x01
    33fc:	42 81       	ldd	r20, Z+2	; 0x02
    33fe:	53 81       	ldd	r21, Z+3	; 0x03
    3400:	84 e0       	ldi	r24, 0x04	; 4
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0a c0       	rjmp	.+20     	; 0x341a <vfprintf+0x200>
    3406:	f5 01       	movw	r30, r10
    3408:	80 81       	ld	r24, Z
    340a:	91 81       	ldd	r25, Z+1	; 0x01
    340c:	9c 01       	movw	r18, r24
    340e:	44 27       	eor	r20, r20
    3410:	37 fd       	sbrc	r19, 7
    3412:	40 95       	com	r20
    3414:	54 2f       	mov	r21, r20
    3416:	82 e0       	ldi	r24, 0x02	; 2
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	a8 0e       	add	r10, r24
    341c:	b9 1e       	adc	r11, r25
    341e:	9f e6       	ldi	r25, 0x6F	; 111
    3420:	f9 22       	and	r15, r25
    3422:	57 ff       	sbrs	r21, 7
    3424:	09 c0       	rjmp	.+18     	; 0x3438 <vfprintf+0x21e>
    3426:	50 95       	com	r21
    3428:	40 95       	com	r20
    342a:	30 95       	com	r19
    342c:	21 95       	neg	r18
    342e:	3f 4f       	sbci	r19, 0xFF	; 255
    3430:	4f 4f       	sbci	r20, 0xFF	; 255
    3432:	5f 4f       	sbci	r21, 0xFF	; 255
    3434:	e0 e8       	ldi	r30, 0x80	; 128
    3436:	fe 2a       	or	r15, r30
    3438:	ca 01       	movw	r24, r20
    343a:	b9 01       	movw	r22, r18
    343c:	a1 01       	movw	r20, r2
    343e:	2a e0       	ldi	r18, 0x0A	; 10
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__ultoa_invert>
    3446:	d8 2e       	mov	r13, r24
    3448:	d2 18       	sub	r13, r2
    344a:	40 c0       	rjmp	.+128    	; 0x34cc <vfprintf+0x2b2>
    344c:	95 37       	cpi	r25, 0x75	; 117
    344e:	29 f4       	brne	.+10     	; 0x345a <vfprintf+0x240>
    3450:	1f 2d       	mov	r17, r15
    3452:	1f 7e       	andi	r17, 0xEF	; 239
    3454:	2a e0       	ldi	r18, 0x0A	; 10
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	1d c0       	rjmp	.+58     	; 0x3494 <vfprintf+0x27a>
    345a:	1f 2d       	mov	r17, r15
    345c:	19 7f       	andi	r17, 0xF9	; 249
    345e:	9f 36       	cpi	r25, 0x6F	; 111
    3460:	61 f0       	breq	.+24     	; 0x347a <vfprintf+0x260>
    3462:	90 37       	cpi	r25, 0x70	; 112
    3464:	20 f4       	brcc	.+8      	; 0x346e <vfprintf+0x254>
    3466:	98 35       	cpi	r25, 0x58	; 88
    3468:	09 f0       	breq	.+2      	; 0x346c <vfprintf+0x252>
    346a:	ac c0       	rjmp	.+344    	; 0x35c4 <vfprintf+0x3aa>
    346c:	0f c0       	rjmp	.+30     	; 0x348c <vfprintf+0x272>
    346e:	90 37       	cpi	r25, 0x70	; 112
    3470:	39 f0       	breq	.+14     	; 0x3480 <vfprintf+0x266>
    3472:	98 37       	cpi	r25, 0x78	; 120
    3474:	09 f0       	breq	.+2      	; 0x3478 <vfprintf+0x25e>
    3476:	a6 c0       	rjmp	.+332    	; 0x35c4 <vfprintf+0x3aa>
    3478:	04 c0       	rjmp	.+8      	; 0x3482 <vfprintf+0x268>
    347a:	28 e0       	ldi	r18, 0x08	; 8
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	0a c0       	rjmp	.+20     	; 0x3494 <vfprintf+0x27a>
    3480:	10 61       	ori	r17, 0x10	; 16
    3482:	14 fd       	sbrc	r17, 4
    3484:	14 60       	ori	r17, 0x04	; 4
    3486:	20 e1       	ldi	r18, 0x10	; 16
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	04 c0       	rjmp	.+8      	; 0x3494 <vfprintf+0x27a>
    348c:	14 fd       	sbrc	r17, 4
    348e:	16 60       	ori	r17, 0x06	; 6
    3490:	20 e1       	ldi	r18, 0x10	; 16
    3492:	32 e0       	ldi	r19, 0x02	; 2
    3494:	17 ff       	sbrs	r17, 7
    3496:	08 c0       	rjmp	.+16     	; 0x34a8 <vfprintf+0x28e>
    3498:	f5 01       	movw	r30, r10
    349a:	60 81       	ld	r22, Z
    349c:	71 81       	ldd	r23, Z+1	; 0x01
    349e:	82 81       	ldd	r24, Z+2	; 0x02
    34a0:	93 81       	ldd	r25, Z+3	; 0x03
    34a2:	44 e0       	ldi	r20, 0x04	; 4
    34a4:	50 e0       	ldi	r21, 0x00	; 0
    34a6:	08 c0       	rjmp	.+16     	; 0x34b8 <vfprintf+0x29e>
    34a8:	f5 01       	movw	r30, r10
    34aa:	80 81       	ld	r24, Z
    34ac:	91 81       	ldd	r25, Z+1	; 0x01
    34ae:	bc 01       	movw	r22, r24
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	42 e0       	ldi	r20, 0x02	; 2
    34b6:	50 e0       	ldi	r21, 0x00	; 0
    34b8:	a4 0e       	add	r10, r20
    34ba:	b5 1e       	adc	r11, r21
    34bc:	a1 01       	movw	r20, r2
    34be:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__ultoa_invert>
    34c2:	d8 2e       	mov	r13, r24
    34c4:	d2 18       	sub	r13, r2
    34c6:	8f e7       	ldi	r24, 0x7F	; 127
    34c8:	f8 2e       	mov	r15, r24
    34ca:	f1 22       	and	r15, r17
    34cc:	f6 fe       	sbrs	r15, 6
    34ce:	0b c0       	rjmp	.+22     	; 0x34e6 <vfprintf+0x2cc>
    34d0:	5e ef       	ldi	r21, 0xFE	; 254
    34d2:	f5 22       	and	r15, r21
    34d4:	d9 14       	cp	r13, r9
    34d6:	38 f4       	brcc	.+14     	; 0x34e6 <vfprintf+0x2cc>
    34d8:	f4 fe       	sbrs	r15, 4
    34da:	07 c0       	rjmp	.+14     	; 0x34ea <vfprintf+0x2d0>
    34dc:	f2 fc       	sbrc	r15, 2
    34de:	05 c0       	rjmp	.+10     	; 0x34ea <vfprintf+0x2d0>
    34e0:	8f ee       	ldi	r24, 0xEF	; 239
    34e2:	f8 22       	and	r15, r24
    34e4:	02 c0       	rjmp	.+4      	; 0x34ea <vfprintf+0x2d0>
    34e6:	1d 2d       	mov	r17, r13
    34e8:	01 c0       	rjmp	.+2      	; 0x34ec <vfprintf+0x2d2>
    34ea:	19 2d       	mov	r17, r9
    34ec:	f4 fe       	sbrs	r15, 4
    34ee:	0d c0       	rjmp	.+26     	; 0x350a <vfprintf+0x2f0>
    34f0:	fe 01       	movw	r30, r28
    34f2:	ed 0d       	add	r30, r13
    34f4:	f1 1d       	adc	r31, r1
    34f6:	80 81       	ld	r24, Z
    34f8:	80 33       	cpi	r24, 0x30	; 48
    34fa:	19 f4       	brne	.+6      	; 0x3502 <vfprintf+0x2e8>
    34fc:	99 ee       	ldi	r25, 0xE9	; 233
    34fe:	f9 22       	and	r15, r25
    3500:	08 c0       	rjmp	.+16     	; 0x3512 <vfprintf+0x2f8>
    3502:	1f 5f       	subi	r17, 0xFF	; 255
    3504:	f2 fe       	sbrs	r15, 2
    3506:	05 c0       	rjmp	.+10     	; 0x3512 <vfprintf+0x2f8>
    3508:	03 c0       	rjmp	.+6      	; 0x3510 <vfprintf+0x2f6>
    350a:	8f 2d       	mov	r24, r15
    350c:	86 78       	andi	r24, 0x86	; 134
    350e:	09 f0       	breq	.+2      	; 0x3512 <vfprintf+0x2f8>
    3510:	1f 5f       	subi	r17, 0xFF	; 255
    3512:	0f 2d       	mov	r16, r15
    3514:	f3 fc       	sbrc	r15, 3
    3516:	14 c0       	rjmp	.+40     	; 0x3540 <vfprintf+0x326>
    3518:	f0 fe       	sbrs	r15, 0
    351a:	0f c0       	rjmp	.+30     	; 0x353a <vfprintf+0x320>
    351c:	1e 15       	cp	r17, r14
    351e:	10 f0       	brcs	.+4      	; 0x3524 <vfprintf+0x30a>
    3520:	9d 2c       	mov	r9, r13
    3522:	0b c0       	rjmp	.+22     	; 0x353a <vfprintf+0x320>
    3524:	9d 2c       	mov	r9, r13
    3526:	9e 0c       	add	r9, r14
    3528:	91 1a       	sub	r9, r17
    352a:	1e 2d       	mov	r17, r14
    352c:	06 c0       	rjmp	.+12     	; 0x353a <vfprintf+0x320>
    352e:	80 e2       	ldi	r24, 0x20	; 32
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	b3 01       	movw	r22, r6
    3534:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    3538:	1f 5f       	subi	r17, 0xFF	; 255
    353a:	1e 15       	cp	r17, r14
    353c:	c0 f3       	brcs	.-16     	; 0x352e <vfprintf+0x314>
    353e:	04 c0       	rjmp	.+8      	; 0x3548 <vfprintf+0x32e>
    3540:	1e 15       	cp	r17, r14
    3542:	10 f4       	brcc	.+4      	; 0x3548 <vfprintf+0x32e>
    3544:	e1 1a       	sub	r14, r17
    3546:	01 c0       	rjmp	.+2      	; 0x354a <vfprintf+0x330>
    3548:	ee 24       	eor	r14, r14
    354a:	04 ff       	sbrs	r16, 4
    354c:	0f c0       	rjmp	.+30     	; 0x356c <vfprintf+0x352>
    354e:	80 e3       	ldi	r24, 0x30	; 48
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	b3 01       	movw	r22, r6
    3554:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    3558:	02 ff       	sbrs	r16, 2
    355a:	1d c0       	rjmp	.+58     	; 0x3596 <vfprintf+0x37c>
    355c:	01 fd       	sbrc	r16, 1
    355e:	03 c0       	rjmp	.+6      	; 0x3566 <vfprintf+0x34c>
    3560:	88 e7       	ldi	r24, 0x78	; 120
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	0e c0       	rjmp	.+28     	; 0x3582 <vfprintf+0x368>
    3566:	88 e5       	ldi	r24, 0x58	; 88
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	0b c0       	rjmp	.+22     	; 0x3582 <vfprintf+0x368>
    356c:	80 2f       	mov	r24, r16
    356e:	86 78       	andi	r24, 0x86	; 134
    3570:	91 f0       	breq	.+36     	; 0x3596 <vfprintf+0x37c>
    3572:	01 ff       	sbrs	r16, 1
    3574:	02 c0       	rjmp	.+4      	; 0x357a <vfprintf+0x360>
    3576:	8b e2       	ldi	r24, 0x2B	; 43
    3578:	01 c0       	rjmp	.+2      	; 0x357c <vfprintf+0x362>
    357a:	80 e2       	ldi	r24, 0x20	; 32
    357c:	f7 fc       	sbrc	r15, 7
    357e:	8d e2       	ldi	r24, 0x2D	; 45
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	b3 01       	movw	r22, r6
    3584:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    3588:	06 c0       	rjmp	.+12     	; 0x3596 <vfprintf+0x37c>
    358a:	80 e3       	ldi	r24, 0x30	; 48
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	b3 01       	movw	r22, r6
    3590:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    3594:	9a 94       	dec	r9
    3596:	d9 14       	cp	r13, r9
    3598:	c0 f3       	brcs	.-16     	; 0x358a <vfprintf+0x370>
    359a:	da 94       	dec	r13
    359c:	f1 01       	movw	r30, r2
    359e:	ed 0d       	add	r30, r13
    35a0:	f1 1d       	adc	r31, r1
    35a2:	80 81       	ld	r24, Z
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	b3 01       	movw	r22, r6
    35a8:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    35ac:	dd 20       	and	r13, r13
    35ae:	a9 f7       	brne	.-22     	; 0x359a <vfprintf+0x380>
    35b0:	06 c0       	rjmp	.+12     	; 0x35be <vfprintf+0x3a4>
    35b2:	80 e2       	ldi	r24, 0x20	; 32
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	b3 01       	movw	r22, r6
    35b8:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    35bc:	ea 94       	dec	r14
    35be:	ee 20       	and	r14, r14
    35c0:	c1 f7       	brne	.-16     	; 0x35b2 <vfprintf+0x398>
    35c2:	43 ce       	rjmp	.-890    	; 0x324a <vfprintf+0x30>
    35c4:	f3 01       	movw	r30, r6
    35c6:	66 81       	ldd	r22, Z+6	; 0x06
    35c8:	77 81       	ldd	r23, Z+7	; 0x07
    35ca:	cb 01       	movw	r24, r22
    35cc:	2b 96       	adiw	r28, 0x0b	; 11
    35ce:	e2 e1       	ldi	r30, 0x12	; 18
    35d0:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__epilogue_restores__>

000035d4 <strnlen_P>:
    35d4:	fc 01       	movw	r30, r24
    35d6:	05 90       	lpm	r0, Z+
    35d8:	61 50       	subi	r22, 0x01	; 1
    35da:	70 40       	sbci	r23, 0x00	; 0
    35dc:	01 10       	cpse	r0, r1
    35de:	d8 f7       	brcc	.-10     	; 0x35d6 <strnlen_P+0x2>
    35e0:	80 95       	com	r24
    35e2:	90 95       	com	r25
    35e4:	8e 0f       	add	r24, r30
    35e6:	9f 1f       	adc	r25, r31
    35e8:	08 95       	ret

000035ea <strnlen>:
    35ea:	fc 01       	movw	r30, r24
    35ec:	61 50       	subi	r22, 0x01	; 1
    35ee:	70 40       	sbci	r23, 0x00	; 0
    35f0:	01 90       	ld	r0, Z+
    35f2:	01 10       	cpse	r0, r1
    35f4:	d8 f7       	brcc	.-10     	; 0x35ec <strnlen+0x2>
    35f6:	80 95       	com	r24
    35f8:	90 95       	com	r25
    35fa:	8e 0f       	add	r24, r30
    35fc:	9f 1f       	adc	r25, r31
    35fe:	08 95       	ret

00003600 <fputc>:
    3600:	0f 93       	push	r16
    3602:	1f 93       	push	r17
    3604:	cf 93       	push	r28
    3606:	df 93       	push	r29
    3608:	8c 01       	movw	r16, r24
    360a:	eb 01       	movw	r28, r22
    360c:	8b 81       	ldd	r24, Y+3	; 0x03
    360e:	81 ff       	sbrs	r24, 1
    3610:	1b c0       	rjmp	.+54     	; 0x3648 <fputc+0x48>
    3612:	82 ff       	sbrs	r24, 2
    3614:	0d c0       	rjmp	.+26     	; 0x3630 <fputc+0x30>
    3616:	2e 81       	ldd	r18, Y+6	; 0x06
    3618:	3f 81       	ldd	r19, Y+7	; 0x07
    361a:	8c 81       	ldd	r24, Y+4	; 0x04
    361c:	9d 81       	ldd	r25, Y+5	; 0x05
    361e:	28 17       	cp	r18, r24
    3620:	39 07       	cpc	r19, r25
    3622:	64 f4       	brge	.+24     	; 0x363c <fputc+0x3c>
    3624:	e8 81       	ld	r30, Y
    3626:	f9 81       	ldd	r31, Y+1	; 0x01
    3628:	01 93       	st	Z+, r16
    362a:	f9 83       	std	Y+1, r31	; 0x01
    362c:	e8 83       	st	Y, r30
    362e:	06 c0       	rjmp	.+12     	; 0x363c <fputc+0x3c>
    3630:	e8 85       	ldd	r30, Y+8	; 0x08
    3632:	f9 85       	ldd	r31, Y+9	; 0x09
    3634:	80 2f       	mov	r24, r16
    3636:	09 95       	icall
    3638:	89 2b       	or	r24, r25
    363a:	31 f4       	brne	.+12     	; 0x3648 <fputc+0x48>
    363c:	8e 81       	ldd	r24, Y+6	; 0x06
    363e:	9f 81       	ldd	r25, Y+7	; 0x07
    3640:	01 96       	adiw	r24, 0x01	; 1
    3642:	9f 83       	std	Y+7, r25	; 0x07
    3644:	8e 83       	std	Y+6, r24	; 0x06
    3646:	02 c0       	rjmp	.+4      	; 0x364c <fputc+0x4c>
    3648:	0f ef       	ldi	r16, 0xFF	; 255
    364a:	1f ef       	ldi	r17, 0xFF	; 255
    364c:	c8 01       	movw	r24, r16
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	08 95       	ret

00003658 <__ultoa_invert>:
    3658:	fa 01       	movw	r30, r20
    365a:	aa 27       	eor	r26, r26
    365c:	28 30       	cpi	r18, 0x08	; 8
    365e:	51 f1       	breq	.+84     	; 0x36b4 <__ultoa_invert+0x5c>
    3660:	20 31       	cpi	r18, 0x10	; 16
    3662:	81 f1       	breq	.+96     	; 0x36c4 <__ultoa_invert+0x6c>
    3664:	e8 94       	clt
    3666:	6f 93       	push	r22
    3668:	6e 7f       	andi	r22, 0xFE	; 254
    366a:	6e 5f       	subi	r22, 0xFE	; 254
    366c:	7f 4f       	sbci	r23, 0xFF	; 255
    366e:	8f 4f       	sbci	r24, 0xFF	; 255
    3670:	9f 4f       	sbci	r25, 0xFF	; 255
    3672:	af 4f       	sbci	r26, 0xFF	; 255
    3674:	b1 e0       	ldi	r27, 0x01	; 1
    3676:	3e d0       	rcall	.+124    	; 0x36f4 <__ultoa_invert+0x9c>
    3678:	b4 e0       	ldi	r27, 0x04	; 4
    367a:	3c d0       	rcall	.+120    	; 0x36f4 <__ultoa_invert+0x9c>
    367c:	67 0f       	add	r22, r23
    367e:	78 1f       	adc	r23, r24
    3680:	89 1f       	adc	r24, r25
    3682:	9a 1f       	adc	r25, r26
    3684:	a1 1d       	adc	r26, r1
    3686:	68 0f       	add	r22, r24
    3688:	79 1f       	adc	r23, r25
    368a:	8a 1f       	adc	r24, r26
    368c:	91 1d       	adc	r25, r1
    368e:	a1 1d       	adc	r26, r1
    3690:	6a 0f       	add	r22, r26
    3692:	71 1d       	adc	r23, r1
    3694:	81 1d       	adc	r24, r1
    3696:	91 1d       	adc	r25, r1
    3698:	a1 1d       	adc	r26, r1
    369a:	20 d0       	rcall	.+64     	; 0x36dc <__ultoa_invert+0x84>
    369c:	09 f4       	brne	.+2      	; 0x36a0 <__ultoa_invert+0x48>
    369e:	68 94       	set
    36a0:	3f 91       	pop	r19
    36a2:	2a e0       	ldi	r18, 0x0A	; 10
    36a4:	26 9f       	mul	r18, r22
    36a6:	11 24       	eor	r1, r1
    36a8:	30 19       	sub	r19, r0
    36aa:	30 5d       	subi	r19, 0xD0	; 208
    36ac:	31 93       	st	Z+, r19
    36ae:	de f6       	brtc	.-74     	; 0x3666 <__ultoa_invert+0xe>
    36b0:	cf 01       	movw	r24, r30
    36b2:	08 95       	ret
    36b4:	46 2f       	mov	r20, r22
    36b6:	47 70       	andi	r20, 0x07	; 7
    36b8:	40 5d       	subi	r20, 0xD0	; 208
    36ba:	41 93       	st	Z+, r20
    36bc:	b3 e0       	ldi	r27, 0x03	; 3
    36be:	0f d0       	rcall	.+30     	; 0x36de <__ultoa_invert+0x86>
    36c0:	c9 f7       	brne	.-14     	; 0x36b4 <__ultoa_invert+0x5c>
    36c2:	f6 cf       	rjmp	.-20     	; 0x36b0 <__ultoa_invert+0x58>
    36c4:	46 2f       	mov	r20, r22
    36c6:	4f 70       	andi	r20, 0x0F	; 15
    36c8:	40 5d       	subi	r20, 0xD0	; 208
    36ca:	4a 33       	cpi	r20, 0x3A	; 58
    36cc:	18 f0       	brcs	.+6      	; 0x36d4 <__ultoa_invert+0x7c>
    36ce:	49 5d       	subi	r20, 0xD9	; 217
    36d0:	31 fd       	sbrc	r19, 1
    36d2:	40 52       	subi	r20, 0x20	; 32
    36d4:	41 93       	st	Z+, r20
    36d6:	02 d0       	rcall	.+4      	; 0x36dc <__ultoa_invert+0x84>
    36d8:	a9 f7       	brne	.-22     	; 0x36c4 <__ultoa_invert+0x6c>
    36da:	ea cf       	rjmp	.-44     	; 0x36b0 <__ultoa_invert+0x58>
    36dc:	b4 e0       	ldi	r27, 0x04	; 4
    36de:	a6 95       	lsr	r26
    36e0:	97 95       	ror	r25
    36e2:	87 95       	ror	r24
    36e4:	77 95       	ror	r23
    36e6:	67 95       	ror	r22
    36e8:	ba 95       	dec	r27
    36ea:	c9 f7       	brne	.-14     	; 0x36de <__ultoa_invert+0x86>
    36ec:	00 97       	sbiw	r24, 0x00	; 0
    36ee:	61 05       	cpc	r22, r1
    36f0:	71 05       	cpc	r23, r1
    36f2:	08 95       	ret
    36f4:	9b 01       	movw	r18, r22
    36f6:	ac 01       	movw	r20, r24
    36f8:	0a 2e       	mov	r0, r26
    36fa:	06 94       	lsr	r0
    36fc:	57 95       	ror	r21
    36fe:	47 95       	ror	r20
    3700:	37 95       	ror	r19
    3702:	27 95       	ror	r18
    3704:	ba 95       	dec	r27
    3706:	c9 f7       	brne	.-14     	; 0x36fa <__ultoa_invert+0xa2>
    3708:	62 0f       	add	r22, r18
    370a:	73 1f       	adc	r23, r19
    370c:	84 1f       	adc	r24, r20
    370e:	95 1f       	adc	r25, r21
    3710:	a0 1d       	adc	r26, r0
    3712:	08 95       	ret

00003714 <_exit>:
    3714:	f8 94       	cli

00003716 <__stop_program>:
    3716:	ff cf       	rjmp	.-2      	; 0x3716 <__stop_program>
